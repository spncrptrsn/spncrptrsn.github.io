INIT
CHARACTER:%Char
CHARACTER:%Player
INT:%ResolveLevel=0
INT:%DualCounter
INT:%Saved
STRING:%StatusString1
STRING:%StatusString2
CHARACTER:%AuraCaster

EVENTS
	
//===========================================================//
//                   Character Extensions                   *//
//===========================================================//

EVENT ABSTNonCombatSkill
VARS
CHARACTER:_Char
INT:_Int
STATUS:_Status
ON
	OnSkillCast(_Char,_)
ACTIONS
	SetGlobalFlag("AttackOrSkill")
	
EVENT ABSTOnCombat
VARS
CHARACTER:_Char
INT:_Int
ON
	OnEnteredCombat(_Char,_)
ACTIONS
	IF "c1"
		CharacterHasTalent(_Char,ResurrectToFullHealth)
	THEN
		CharacterApplyStatus(_Char,ABST_MORNING,-1)
	ENDIF
	IF "c1"
		IsTagged(_Char,"ABST_BOSS")
	THEN
		SetIsBoss(_Char,1)
	ENDIF	
	IF "c1"
		CharacterHasStatus(_Char,SLOWED)
	THEN	
		Set(_Int,1)
	ELSE
		Set(_Int,0)
	ENDIF
	SetVar(_Char,"UnstableCounter",_Int)
	IF "c1&!c2&!c3"
		CharacterIsPlayer(_Char)
		CharacterHasStatus(_Char,CHARMED)
		CharacterHasStatus(_Char,MADNESS)
	THEN	
		Set(%Player,_Char)
	ENDIF	
	
EVENT ABSTOnTurn
VARS
CHARACTER:_Char
FLOAT:_Vitality
ON
	OnTurn(_Char,_)
ACTIONS
	CharacterRemoveStatus(_Char,ABST_AEGIS,null,0)
	IF "c1&c2"
		IsInSurface(_Char,SurfaceSmokeCloud)
		CharacterHasTalent(_Char,SurpriseAttack)
	THEN
		CharacterApplyStatus(_Char,ABST_GUERILLA,-1)
	ENDIF
	IF "c1&c2&c3"
		CharacterHasTalent(_Char,WhatARush)
		CharacterGetStat(_Vitality,_Char,Vitality)
		IsLessThen(_Vitality,.5)
	THEN
		CharacterApplyStatus(_Char,ABST_RUSH,-1)
	ENDIF
	Set(%DualCounter,0)
	IF "c1&!c2&!c3"
		CharacterIsPlayer(_Char)
		CharacterHasStatus(_Char,CHARMED)
		CharacterHasStatus(_Char,MADNESS)
	THEN	
		Set(%Player,_Char)
	ENDIF	
	
EVENT ABSTAttack
VARS
CHARACTER:_Target
CHARACTER:_Char
INT:_Int
STATUS:_Status
ON
	OnCharacterStartAttackObject(_Target,_,_,_Char)
ACTIONS
	ClearGlobalFlag("AttackOrSkill")
	IF "c1&c2&c3&((c4|c5)|(c6&!c7&!c8))"
		CharacterHasTalent(_Char,DualWieldingDodging)
		IsInCombat(_Char)
		IsInActiveTurn(_Char)
		CharacterHasSkill(_Char,Target_DualWieldingAttack)
		CharacterHasSkill(_Char,Target_PiercingDualWieldingAttack)
		CharacterHasWeaponType(_Char,Wand,1)
		CharacterHasSkill(_Char,Target_SingleHandedAttack)
		CharacterHasSkill(_Char,Shout_RecoverArmour)
	THEN
		CharacterCharacterEvent(_Char,_Target,"ParryMasterEvent")
	ENDIF	
		
EVENT ABSTTurnEnd
VARS
CHARACTER:_Char
ON
	OnTurnEnded(_Char,_)
ACTIONS
	CharacterEvent(_Char,"RemoveTalentStuff")
	
EVENT ABSTOnKillingBlow
VARS
CHARACTER:_Char
CHARACTER:_Target
STRING:_String
INT:_Int
FLOAT:_Float
ON
	OnDie(_Target,_,_Char,_)
ACTIONS
	IF "c1"
		CharacterHasTalent(_Char,Executioner)
	THEN
		CharacterApplyStatus(_Char,ABST_EXEC,1)
	ENDIF
	IF "!c1"
		CharacterIsInParty(_Target)
	THEN	
		Set(_String,null)
		Set(_Int,null)
		Set(_Float,null)
		SetVar(_Target,"UnstableCounter",_Int)
		SetVar(_Target,"NameString",_String)
		SetVar(_Target,"ScrubbedStatus",_String)
		SetVar(_Target,"ABST_Caster",_String)
		SetVar(_Target,"AuraRadius",_Float)
	ENDIF		
	
EVENT ABSTOnCombatEnded
VARS
CHARACTER:_Char
STRING:_String
INT:_Int
FLOAT:_Float
ON
	OnLeftCombat(_Char,_)
ACTIONS
	CharacterRemoveStatus(_Char,ABST_MORNING,null,0)
	CharacterRemoveStatus(_Char,ABST_GUERILLA,null,0)
	CharacterRemoveStatus(_Char,ABST_EXEC,null,0)
	CharacterRemoveStatus(_Char,ABST_RUSH,null,0)
	CharacterRemoveStatus(_Char,ABST_DUAL5,null,0)
	CharacterRemoveStatus(_Char,ABST_DUAL10,null,0)
	CharacterRemoveStatus(_Char,ABST_DUAL15,null,0)
	CharacterRemoveStatus(_Char,ABST_DUAL20,null,0)
	CharacterRemoveStatus(_Char,ABST_DUAL25,null,0)	
	Set(_Int,0)
	SetVar(_Char,"UnstableCounter",_Int)
	IF "!c1"
		CharacterIsInParty(_Char)
	THEN	
		Set(_String,null)
		Set(_Int,null)
		Set(_Float,null)
		SetVar(_Char,"UnstableCounter",_Int)
		SetVar(_Char,"NameString",_String)
		SetVar(_Char,"ScrubbedStatus",_String)
		SetVar(_Char,"ABST_Caster",_String)
		SetVar(_Char,"AuraRadius",_Float)
	ENDIF	
	
//===========================================================//
//                  Tally & Print Functions                 *//
//===========================================================//

EVENT PhysicalArmorTally
VARS
CHARACTER:_Char
INT:_Saved
CHARACTER:_Caster
CHARACTER:_Leader
INT:_PersInt
INT:_ArmorInt
INT:_RetInt
INT:_StatInt
INT:_DeflectInt
INT:_CasterBonus
INT:_CharBonus
INT:_Roll
INT:_Roll2
INT:_PrintRoll
INT:_PrintRoll2
INT:_CasterAdv
INT:_CharAdv
INT:_FinalRoll
INT:_Parry
INT:_Unstable
INT:_HighestRoll
INT:_Resolve
//FLOAT:_StatFloat
FLOAT:_ArmorFloat
FLOAT:_Distance
FLOAT:_Vitality
STRING:_A
STRING:_B
STRING:_C
STRING:_D
STRING:_E
STRING:_F
STRING:_G
STRING:_H
STRING:_I
STRING:_J
STRING:_K
STRING:_L
STRING:_M
STRING:_N
STRING:_CharColor
STRING:_CasterColor
STRING:_CasterAdvText
STRING:_CharAdvText
STRING:_CharTalents
STRING:_CasterTalents
FIXEDSTRING:_FixedString
STATUS:_Status
ON
	OnFunction("PhysArmorTally")
ACTIONS
	Set(_DeflectInt,0)
	Set(_RetInt,0)
	Set(_CasterBonus,0)
	Set(_CharBonus,0)
	Set(_Saved,0)
	Set(_CasterAdv,0)
	Set(_CharAdv,0)
	Set(_Char,%Char)
	IF "c1&c2&c3"
		CharacterGetStat(_ArmorFloat,_Char,PhysicalArmor)
//		CharacterGetStat(_StatFloat,_Char,Constitution)
		CharacterGetAbility(_PersInt,_Char,Perseverance)
		GetVar(_Caster,_Char,"ABST_Caster")
	THEN
		IF "c1"
			HasFlag(_Char,"LowArmorWeapon")
		THEN	
			Set(_HighestRoll,25)
			ClearFlag(_Char,"LowArmorWeapon")
			Print(_N,"(out of [1])",_HighestRoll)
		ELIF "c1"
			HasFlag(_Char,"MediumArmorWeapon")
		THEN	
			Set(_HighestRoll,50)
			ClearFlag(_Char,"MediumArmorWeapon")
			Print(_N,"(out of [1])",_HighestRoll)
		ELIF "c1"
			HasFlag(_Char,"HighArmorWeapon")
		THEN	
			Set(_HighestRoll,75)
			ClearFlag(_Char,"HighArmorWeapon")
			Print(_N,"(out of [1])",_HighestRoll)
		ELSE
			Set(_HighestRoll,100)
			Print(_N,"")			
		ENDIF
	ENDIF
	IF "c1"
		CharacterIsInParty(_Caster)
	THEN
		Print(_CasterColor,"<font color='#188ede'>")
	ELIF "c1"
		CharacterIsAlly(_Caster,%Player)
	THEN
		Print(_CasterColor,"<font color='#40b606'>")
	ELSE
		Print(_CasterColor,"<font color='#c80030'>")
	ENDIF
	IF "c1"
		CharacterIsInParty(_Char)
	THEN
		Print(_CharColor,"<font color='#188ede'>")
	ELIF "c1"
		CharacterIsAlly(_Char,%Player)
	THEN
		Print(_CharColor,"<font color='#40b606'>")
	ELSE
		Print(_CharColor,"<font color='#c80030'>")
	ENDIF
//-----------Char-Bonuses-----------//
	IF "c1"
		CharacterHasTalent(_Char,WarriorLoreNaturalHealth)
	THEN
		Add(_CharBonus,5)
		Print(_B," + 5 [1]picture of health</font>", _CharColor)
	ELSE
		Print(_B,"")
	ENDIF
	IF "c1"
		CharacterHasTalent(_Char,WalkItOff)
	THEN
		Add(_CharBonus,3)
		Print(_C," + 3 [1]walk it off</font>", _CharColor)
	ELSE
		Print(_C,"")
	ENDIF
	IF "c1"
		IsGreaterThen(_PersInt,0)
	THEN
		Print(_D," + [1] [2]pers.</font>", _PersInt, _CharColor)
	ELSE
		Print(_D, "")
	ENDIF
	IF "c1"
		IsGreaterThen(%ResolveLevel,0)
	THEN
		IF "!c1&c2"
			CharacterIsInParty(_Char)
			IsHardcore()
		THEN
			Set(_Resolve,%ResolveLevel)
			Multiply(_Resolve,5)
			Add(_CharBonus,_Resolve)
			Print(_E," + [2] [1]resolve</font>", _CharColor, _Resolve)
		ELSE
			Print(_E, "")
		ENDIF
	ELSE
		Print(_E, "")
	ENDIF
	Print(_CharTalents, "[1][2][3][4]", _B, _C, _D, _E)
	Add(_CharBonus,_PersInt)
//-----------Char-Advantage-----------//
	IF "c1"
		CharacterHasStatus(_Char,BLESSED)
	THEN
		Add(_CharAdv,1)
		Print(_A," | <font color='#46b195'>blessed</font>")
	ELSE
		Print(_A,"")
	ENDIF
	IF "c1"
		IsTagged(_Char,"ABST_BOSS")
	THEN
		IF "c1&!c2"
			IsHardcore()
			HasGlobalFlag("ABST_NoBossBoost")
		THEN
			Add(_CharAdv,1)
			Print(_B," | [1]advantageous</font>", _CharColor)
		ELSE
			Print(_B,"")
		ENDIF
	ELSE
		Print(_B,"")
	ENDIF
	IF "c1"
		HasFlag(_Char,"ABST_DuckFlag")
	THEN
		Add(_CharAdv,1)
		Print(_C," | [1]duck duck goose</font>", _CharColor)
	ELSE
		Print(_C,"")
	ENDIF
	IF "c1"
		CharacterHasTalent(_Char,Escapist)
	THEN
		IF "c1"
			CharacterHasStatus(_Char,FLANKED)
		THEN
			Add(_CharAdv,1)
			Print(_D," | [1]escapist</font>", _CharColor)
		ELSE
			Print(_D,"")
		ENDIF
	ELSE
		Print(_D,"")
	ENDIF
	IF "c1"
		CharacterHasStatus(_Char,ABST_FSD)
	THEN
		Add(_CharAdv,1)
		Set(_Status,ABST_FSD)
		SetVar(_Char,"ScrubbedStatus",_Status)
		CharacterEvent(_Char,"CharacterRemoveStatus")
		Print(_E," | [1]five star diner</font>", _CharColor)
	ELSE
		Print(_E,"")
	ENDIF
	IF "c1"
		CharacterHasStatus(_Char,LEADERSHIP)
	THEN
		IF "c1&c2&c3"
			CharacterGetStatusSourceCharacter(_Char,LEADERSHIP,_Leader)
			CharacterGetAbility(_StatInt,_Leader,Leadership)
			CharacterIsAlly(_Leader,_Char)
		THEN
			Multiply(_StatInt,4)
			GetRandomBetween(_Roll,1,100)
			IF "c1"
				IsLessThen(_Roll,_StatInt)
			THEN
				Add(_CharAdv,1)
				Print(_F," | [1]leadership</font>", _CharColor)
			ELSE
				Print(_F,"")
			ENDIF
		ELSE
			Print(_F,"")
		ENDIF
	ELSE
		Print(_F,"")
	ENDIF
	IF "c1"
		CharacterHasStatus(_Char,ABST_LEECH)
	THEN
		Add(_CharAdv,1)
		Print(_G," | [1]leech</font>", _CharColor)
		Set(_Status,ABST_LEECH)
		SetVar(_Char,"ScrubbedStatus",_Status)
		CharacterEvent(_Char,"CharacterRemoveStatus")
	ELSE
		Print(_G,"")
	ENDIF
	IF "c1"
		HasFlag(_Char,"ABST_MnemonicFlag")
	THEN
		Add(_CharAdv,1)
		Print(_H," | [1]mnemonic</font>", _CharColor)
	ELSE
		Print(_H,"")
	ENDIF
	IF "c1"
		HasFlag(_Char,"ABST_MorningFlag")
	THEN
		IF "c1"
			CharacterHasStatus(_Char,ABST_AEGIS)
		THEN
			Add(_CharAdv,1)
			Print(_I," | [1]escapist</font>", _CharColor)
			CharacterRemoveStatus(_Char,ABST_AEGIS,null,0)
			Print(_J,"")
		ELSE
			Add(_CharAdv,1)
			Print(_I,"")
			Print(_J," | [1]morning person</font>", _CharColor)
			CharacterRemoveStatus(_Char,ABST_MORNING,null,0)
		ENDIF
	ELSE
		Print(_J,"")
		Print(_I,"")
	ENDIF
	IF "c1"
		HasFlag(_Char,"ABST_PictureFlag")
	THEN
		Add(_CharAdv,1)
		Print(_K," | [1]picture of health</font>", _CharColor)
	ELSE
		Print(_K,"")
	ENDIF
	IF "c1"
		CharacterHasStatus(_Char,CURSED)
	THEN
		Subtract(_CharAdv,1)
		Print(_L," | <font color='#d040d0'>cursed</font>")
	ELSE
		Print(_L,"")
	ENDIF
	IF "c1"
		CharacterHasStatus(_Char,ABST_FLURRY)
	THEN
		Set(_Status,ABST_FLURRY)
		SetVar(_Char,"ScrubbedStatus",_Status)
		CharacterEvent(_Char,"CharacterRemoveStatus")
		Subtract(_CharAdv,1)
		Print(_M," | <font color='#d040d0'>slingshot</font>")
	ELSE
		Print(_M,"")
	ENDIF
	Print(_CharAdvText,"[1][2][3][4][5][6][7][8][9][10][11][12][13]", _A, _B, _C, _D, _E, _F, _G, _H, _I, _J, _K, _L, _M)
//-----------Caster-Bonuses-----------//
	IF "c1"
		CharacterHasTalent(_Caster,Ambidextrous)
	THEN
		IF "c1"
			CharacterHasSkill(_Caster,Target_SingleHandedAttack)
		THEN
			Add(_CasterBonus,5)
			Print(_A," + 5 [1]ambidextrous</font>", _CasterColor)
		ELSE
			Print(_A,"")
		ENDIF
	ELSE
		Print(_A,"")
	ENDIF
	IF "c1"
		CharacterHasStatus(_Caster,ARROW_CHECK_PHYS)
	THEN
		Add(_CasterBonus,5)
		Print(_B," + 5 [1]arrow recovery</font>", _CasterColor)
	ELSE
		Print(_B,"")
	ENDIF
	IF "c1"
		CharacterHasTalent(_Caster,FaroutDude)
	THEN
		IF "c1&(c2|c3|c4|c5)"
			IsLessThen(_HighestRoll,100)
			CharacterHasWeaponType(_Caster,Bow,1)
			CharacterHasWeaponType(_Caster,Wand,1)
			CharacterHasWeaponType(_Caster,Crossbow,1)
			CharacterHasWeaponType(_Caster,Staff,1)
		THEN
			Add(_CasterBonus,5)
			Print(_C," + 5 [1]far out man</font>", _CasterColor)
		ELSE
			Print(_C,"")
		ENDIF
	ELSE
		Print(_C,"")
	ENDIF
	IF "c1"
		CharacterHasTalent(_Caster,Perfectionist)
	THEN
		IF "c1&c2"
			CharacterGetStat(_Vitality,_Caster,Vitality)
			IsEqual(_Vitality,1.0)
		THEN
			Add(_CasterBonus,3)
			Print(_D," + 3 [1]hothead</font>", _CasterColor)
		ELSE
			Print(_D,"")
		ENDIF
	ELSE
		Print(_D,"")
	ENDIF
	IF "c1"
		CharacterHasTalent(_Caster,AttackOfOpportunity)
	THEN
		IF "c1&!c2&!c3&!c4&c5"
			CharacterHasWeaponType(_Caster,Bow,1)
			CharacterHasWeaponType(_Caster,Wand,1)
			CharacterHasWeaponType(_Caster,Crossbow,1)
			CharacterHasWeaponType(_Caster,Staff,1)
			IsLessThen(_HighestRoll,100)
		THEN
			Add(_CasterBonus,5)
			Print(_E," + 5 [1]opportunist</font>", _CasterColor)
		ELSE
			Print(_E,"")
		ENDIF
	ELSE
		Print(_E,"")
	ENDIF
	IF "c1"
		CharacterHasTalent(_Caster,DualWieldingDodging)
	THEN
		IF "c1&c2"
			CharacterHasSkill(_Caster,Target_DualWieldingAttack)
			IsGreaterThen(%DualCounter,0)
		THEN
			Set(_Parry,%DualCounter)		
			Multiply(_Parry,3)
			Add(_CasterBonus,_Parry)
			Print(_G," + [2] [1]parry master</font>", _CasterColor, _Parry)
		ELSE
			Print(_G,"")
		ENDIF
	ELSE
		Print(_G,"")
	ENDIF
	IF "c1"
		CharacterHasStatus(_Caster,GRENADE_CHECK_PHYS)
	THEN
		IF "!c1"
			CharacterIsAlly(_Char,_Caster)
		THEN
			Add(_CasterBonus,5)
			Print(_H," + 5 [1]slingshot</font>", _CasterColor)
		ELSE
			Subtract(_CasterBonus,5)
			Print(_H," - 5 [1]slingshot</font>", _CasterColor)
		ENDIF
	ELSE
		Print(_H,"")
	ENDIF
	IF "c1"
		CharacterHasTalent(_Caster,Torturer)
	THEN
		IF "c1"
			HasFlag(_Char,"ABST_TorturerFlag")
		THEN
			Add(_CasterBonus,5)
			Print(_I," + 5 [1]torturer</font>", _CasterColor)
		ELSE
			Print(_I,"")
		ENDIF
	ELSE
		Print(_I,"")
	ENDIF
	IF "c1"
		CharacterHasTalent(_Caster,Unstable)
	THEN
		IF "c1"
			HasFlag(_Char,"ABST_UnstableFlag")
		THEN
			IF "c1&c2"
				GetVar(_Unstable,_Char,"UnstableCounter")
				IsGreaterThen(_Unstable,0)
			THEN
				Multiply(_Unstable,5)
				Add(_Unstable,5)
			ELSE
				Set(_Unstable,5)
			ENDIF
				Add(_CasterBonus,_Unstable)
			Print(_J," + [2] [1]vindictive</font>", _CasterColor, _Unstable)
		ELSE
			Print(_J,"")
		ENDIF
	ELSE
		Print(_J,"")
	ENDIF
	IF "c1"
		CharacterGetAbility(_RetInt,_Caster,Reflection)
	THEN
		IF "c1"
			IsGreaterThen(_RetInt,0)
		THEN
			Print(_K," + [1] [2]ret.</font>", _RetInt, _CasterColor)
		ELSE
			Print(_K, "")
		ENDIF
	ENDIF
	Print(_CasterTalents,"[1][2][3][4][5][6][7][8][9][10]", _A, _B, _C, _D, _E, _G, _H, _I, _J, _K)
	Add(_CasterBonus,_RetInt)
//-----------Caster-Advantage-------//
	IF "c1"
		CharacterHasStatus(_Caster,BLESSED)
	THEN
		Add(_CasterAdv,1)
		Print(_A," | <font color='#46b195'>blessed</font>")
	ELSE
		Print(_A,"")
	ENDIF
	IF "c1"
		IsTagged(_Char,"ABST_BOSS")
	THEN
		IF "c1&!c2"
			IsHardcore()
			HasGlobalFlag("ABST_NoBossBoost")
		THEN
			Add(_CharAdv,1)
			Print(_B," | [1]advantageous</font>", _CharColor)
		ELSE
			Print(_B,"")
		ENDIF
	ELSE
		Print(_B,"")
	ENDIF
	IF "c1"
		CharacterHasTalent(_Caster,Demon)
	THEN
		IF "c1"
			HasFlag(_Char,"ABST_SurfaceFlag")
		THEN
			Add(_CasterAdv,1)
			Print(_C," | [1]demon</font>", _CasterColor)
		ELSE
			Print(_C,"")
		ENDIF
	ELSE
		Print(_C,"")
	ENDIF
	IF "c1"
		CharacterHasTalent(_Caster, ElementalRanger)
	THEN
		IF "c1&(c2|c3)"
			IsLessThen(_HighestRoll,100)
			CharacterHasWeaponType(_Caster,Bow,1)
			CharacterHasWeaponType(_Caster,Crossbow,1)
		THEN
			Add(_CasterAdv,1)
			Print(_D," | [1]elemental ranger</font>", _CasterColor)
		ELSE
			Print(_D,"")
		ENDIF
	ELSE
		Print(_D,"")
	ENDIF
	IF "c1"
		CharacterHasStatus(_Caster,ABST_EXEC)
	THEN
		Add(_CasterAdv,1)
		Print(_E," | [1]executioner</font>", _CasterColor)
		Set(_Status,ABST_EXEC)
		SetVar(_Caster,"ScrubbedStatus",_Status)
		CharacterEvent(_Caster,"CharacterRemoveStatus")
	ELSE
		Print(_E,"")
	ENDIF
	IF "c1"
		CharacterHasStatus(_Caster,ABST_GUERILLA)
	THEN
		Add(_CasterAdv,1)
		Print(_F," | [1]guerrilla</font>", _CasterColor)
		Set(_Status,ABST_GUERILLA)
		SetVar(_Caster,"ScrubbedStatus",_Status)
		CharacterEvent(_Caster,"CharacterRemoveStatus")
	ELSE
		Print(_F,"")
	ENDIF
	IF "c1"
		CharacterHasStatus(_Char,LEADERSHIP)
	THEN
		IF "c1&c2&c3&c4"
			CharacterGetStatusSourceCharacter(_Char,LEADERSHIP,_Leader)
			CharacterGetAbility(_StatInt,_Leader,Leadership)
			CharacterIsAlly(_Leader,_Char)
			CharacterHasTalent(_Leader,Escapist)
		THEN
			Multiply(_StatInt,4)
			GetRandomBetween(_Roll,1,100)
			IF "c1"
				IsLessThen(_Roll,_StatInt)
			THEN
				Add(_CharAdv,1)
				Print(_G," | [1]leadership</font>", _CharColor)
			ELSE
				Print(_G,"")
			ENDIF
		ELSE
			Print(_G,"")
		ENDIF
	ELSE
		Print(_G,"")
	ENDIF
	IF "c1"
		CharacterHasStatus(_Caster,ABST_LEECH)
	THEN
		Add(_CasterAdv,1)
		Print(_H," | [1]leech</font>", _CasterColor)
		Set(_Status,ABST_LEECH)
		SetVar(_Caster,"ScrubbedStatus",_Status)
		CharacterEvent(_Caster,"CharacterRemoveStatus")
	ELSE
		Print(_H,"")
	ENDIF
	IF "c1"
		CharacterHasStatus(_Caster,ABST_RUSH)
	THEN
		Add(_CasterAdv,1)
		Print(_I," | [1]what a rush</font>", _CasterColor)
		Set(_Status,ABST_RUSH)
		SetVar(_Caster,"ScrubbedStatus",_Status)
		CharacterEvent(_Caster,"CharacterRemoveStatus")
	ELSE
		Print(_I,"")
	ENDIF
	IF "c1"
		CharacterHasStatus(_Caster,CURSED)
	THEN
		Subtract(_CasterAdv,1)
		Print(_J," | <font color='#d040d0'>cursed</font>")
	ELSE
		Print(_J,"")
	ENDIF
	IF "c1"
		CharacterHasStatus(_Caster,ABST_ALLIN)
	THEN
		Subtract(_CasterAdv,1)
		Print(_K," | <font color='#d040d0'>slingshot</font>")
		Set(_Status,ABST_ALLIN)
		SetVar(_Caster,"ScrubbedStatus",_Status)
		CharacterEvent(_Caster,"CharacterRemoveStatus")
	ELSE
		Print(_K,"")
	ENDIF
	Print(_CasterAdvText,"[1][2][3][4][5][6][7][8][9][10][11]", _A, _B, _C, _D, _E, _F, _G, _H, _I, _J, _K)
//-----------Home-Stretch-----------//
	IF "!c1&c2"
		CharacterHasTalent(_Char,Raistlin)
		IsGreaterThen(_ArmorFloat,.005)
	THEN
		Multiply(_ArmorFloat,100)
		Cast(_ArmorInt,_ArmorFloat)
		Print(_A, "[1]% <font color='#c1c1c1' size='14'>physical armor</font> ", _ArmorInt)
	ELSE
		Print(_A, "")
		Set(_ArmorInt,0)
	ENDIF
//	Multiply(_StatFloat,.5)
//	Cast(_StatInt,_StatFloat)
//	Add(_CharBonus,_StatInt)
	Add(_DeflectInt,_ArmorInt)
	Add(_DeflectInt,_CharBonus)
	GetRandomBetween(_Roll,1,_HighestRoll)
	Set(_PrintRoll,_Roll)
	Add(_Roll,_CasterBonus)
	GetRandomBetween(_Roll2,1,_HighestRoll)
	Set(_PrintRoll2,_Roll2)
	Add(_Roll2,_CasterBonus)
	IF "c1"
		IsGreaterThen(_CasterAdv,_CharAdv)
	THEN
		Print(_B, " with advantage")
		IF "(c1|c2)&(c3|c4)"
			IsLessThen(_Roll,_DeflectInt)
			IsEqual(_Roll,_DeflectInt)
			IsLessThen(_Roll2,_DeflectInt)
			IsEqual(_Roll2,_DeflectInt)
		THEN
			Set(_Saved,1)
		ENDIF
//------------------//
		IF "c1"
			IsLessThen(_PrintRoll,_PrintRoll2)
		THEN
			Print(_C, "<font color='#aaafb4'>[1],</font>[2]", _PrintRoll, _PrintRoll2)
			Set(_FinalRoll,_Roll2)
		ELIF "c1"
			IsGreaterThen(_PrintRoll,_PrintRoll2)
		THEN
			Print(_C, "<font color='#aaafb4'>[1],</font>[2]", _PrintRoll2, _PrintRoll)
			Set(_FinalRoll,_Roll)
		ELSE
			Print(_C, "[1], [2]", _PrintRoll2, _PrintRoll)
			Set(_FinalRoll,_Roll)
		ENDIF
//------------------//
	ELIF "c1"
		IsGreaterThen(_CharAdv,_CasterAdv)
	THEN
		Print(_B, " with disadvantage")
		IF "(c1|c2)|(c3|c4)"
			IsLessThen(_Roll,_DeflectInt)
			IsEqual(_Roll,_DeflectInt)
			IsLessThen(_Roll2,_DeflectInt)
			IsEqual(_Roll2,_DeflectInt)
		THEN
			Set(_Saved,1)
		ENDIF
//------------------//
		IF "c1"
			IsLessThen(_PrintRoll2,_PrintRoll)
		THEN
			Print(_C, "<font color='#aaafb4'>[1],</font>[2]", _PrintRoll, _PrintRoll2)
			Set(_FinalRoll,_Roll2)
		ELIF "c1"
			IsGreaterThen(_PrintRoll2,_PrintRoll)
		THEN
			Print(_C, "<font color='#aaafb4'>[1],</font>[2]", _PrintRoll2, _PrintRoll)
			Set(_FinalRoll,_Roll)
		ELSE
			Print(_C, "[1], [2]", _PrintRoll2, _PrintRoll)
			Set(_FinalRoll,_Roll)
		ENDIF
//------------------//
	ELSE
		Print(_B, "")
		Set(_FinalRoll,_Roll)
		Print(_C, "[1]", _PrintRoll)
		IF "c1|c2"
			IsLessThen(_Roll,_DeflectInt)
			IsEqual(_Roll,_DeflectInt)
		THEN
			Set(_Saved,1)
		ENDIF
	ENDIF
	IF "c1&c2"
		GetVar(_D,_Char,"NameString")
		GetVar(_E,_Caster,"NameString")
	THEN
	ENDIF
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		IF "c1"
			IsEqual(_HighestRoll,100)
		THEN	
			CharacterPlayEffect(_Char,"FX_GP_Combat_Hit_PhysicalArmor_01")
			Print(_F, "[1] resisted! ([2]%)", %StatusString1, _DeflectInt)	
			Cast(_FixedString,_F)
			StatusText(_Char,_FixedString)
		ENDIF
//		Print(_F, "[1][2]</font> resisted [4][5]</font>'s [3] attempt:<font size='14'> [6] to resist &gt; [7] to apply<br>     [1]{ </font>[8][9] [1]con. bonus</font>[10][11]<br>     [4]{ </font>[12] rolled <font color='#aaafb4'>(out of [16])</font>[13][14][15]</font>", _CharColor, _D, %StatusString1, _CasterColor, _E, _DeflectInt, _FinalRoll, _A, _StatInt, _CharTalents, _CharAdvText, _C, _B, _CasterTalents, _CasterAdvText, _HighestRoll)
		Print(_F, "[1][2]</font> resisted [4][5]</font>'s [3] attempt:<font size='14'> [6] to resist &gt; [7] to apply<br>     [1]{ </font>[8][9][10]<br>     [4]{ </font>[11] rolled <font color='#aaafb4'>[15]</font>[12][13][14]</font>", _CharColor, _D, %StatusString1, _CasterColor, _E, _DeflectInt, _FinalRoll, _A, _CharTalents, _CharAdvText, _C, _B, _CasterTalents, _CasterAdvText, _N)
	ELSE
//		Print(_F, "[1][2]</font>[3] by [4][5]</font>:<font size='14'> [6] to resist &lt; [7] to apply<br>     [1]{ </font>[8][9] [1]con. bonus</font>[10][11]<br>     [4]{ </font>[12] rolled <font color='#aaafb4'>(out of [16])</font>[13][14][15]</font>", _CharColor, _D, %StatusString2, _CasterColor, _E, _DeflectInt, _FinalRoll, _A, _StatInt, _CharTalents, _CharAdvText, _C, _B, _CasterTalents, _CasterAdvText, _HighestRoll)
		Print(_F, "[1][2]</font>[3] by [4][5]</font>:<font size='14'> [6] to resist &lt; [7] to apply<br>     [1]{ </font>[8][9][10]<br>     [4]{ </font>[11] rolled <font color='#aaafb4'>[15]</font>[12][13][14]</font>", _CharColor, _D, %StatusString2, _CasterColor, _E, _DeflectInt, _FinalRoll, _A, _CharTalents, _CharAdvText, _C, _B, _CasterTalents, _CasterAdvText, _N)
	ENDIF
	Cast(_FixedString,_F)
	IF "!c1"
		CharacterHasTalent(_Char,Raistlin)
	THEN	
		CombatLogText(_Char, _FixedString, 0, 1)
	ENDIF
	Set(%Saved,_Saved)	
	
EVENT MagicArmorTally
VARS
CHARACTER:_Char
INT:_Saved
CHARACTER:_Caster
CHARACTER:_Leader
INT:_PersInt
INT:_ArmorInt
INT:_RetInt
INT:_StatInt
INT:_DeflectInt
INT:_CasterBonus
INT:_CharBonus
INT:_Roll
INT:_Roll2
INT:_PrintRoll
INT:_PrintRoll2
INT:_CasterAdv
INT:_CharAdv
INT:_FinalRoll
INT:_Unstable
INT:_HighestRoll
INT:_Resolve
INT:_Parry
//FLOAT:_StatFloat
FLOAT:_ArmorFloat
FLOAT:_Distance
FLOAT:_Vitality
STRING:_A
STRING:_B
STRING:_C
STRING:_D
STRING:_E
STRING:_F
STRING:_G
STRING:_H
STRING:_I
STRING:_J
STRING:_K
STRING:_L
STRING:_M
STRING:_CharColor
STRING:_CasterColor
STRING:_CasterAdvText
STRING:_CharAdvText
STRING:_CharTalents
STRING:_CasterTalents
FIXEDSTRING:_CombatLogFixedString
STATUS:_Status
FIXEDSTRING:_FixedString
ON
	OnFunction("MagicArmorTally")
ACTIONS
	Set(_DeflectInt,0)
	Set(_RetInt,0)
	Set(_CasterBonus,0)
	Set(_CharBonus,0)
	Set(_Saved,0)
	Set(_CasterAdv,0)
	Set(_CharAdv,0)
	Set(_Char,%Char)
	IF "c1&c2&c3"
		CharacterGetStat(_ArmorFloat,_Char,MagicArmor)
//		CharacterGetStat(_StatFloat,_Char,Wits)
		CharacterGetAbility(_PersInt,_Char,Perseverance)
		GetVar(_Caster,_Char,"ABST_Caster")
	THEN
		IF "c1"
			HasFlag(_Char,"LowArmorWeapon")
		THEN	
			Set(_HighestRoll,25)
			ClearFlag(_Char,"LowArmorWeapon")
			Print(_M,"(out of [1])",_HighestRoll)
		ELIF "c1"
			HasFlag(_Char,"MediumArmorWeapon")
		THEN	
			Set(_HighestRoll,50)
			ClearFlag(_Char,"MediumArmorWeapon")
			Print(_M,"(out of [1])",_HighestRoll)
		ELIF "c1"
			HasFlag(_Char,"HighArmorWeapon")
		THEN	
			Set(_HighestRoll,75)
			ClearFlag(_Char,"HighArmorWeapon")
			Print(_M,"(out of [1])",_HighestRoll)
		ELSE
			Set(_HighestRoll,100)
			Print(_M,"")			
		ENDIF
	ENDIF	
	IF "c1"
		CharacterIsInParty(_Caster)
	THEN
		Print(_CasterColor,"<font color='#188ede'>")
	ELIF "c1"
		CharacterIsAlly(_Caster,%Player)
	THEN
		Print(_CasterColor,"<font color='#40b606'>")
	ELSE
		Print(_CasterColor,"<font color='#c80030'>")
	ENDIF
	IF "c1"
		CharacterIsInParty(_Char)
	THEN
		Print(_CharColor,"<font color='#188ede'>")
	ELIF "c1"
		CharacterIsAlly(_Char,%Player)
	THEN
		Print(_CharColor,"<font color='#40b606'>")
	ELSE
		Print(_CharColor,"<font color='#c80030'>")
	ENDIF
//------------Char-Bonuses------------//
	IF "c1"
		CharacterHasTalent(_Char,LivingArmor)
	THEN
		Add(_CharBonus,5)
		Print(_B," + 5[1] living armour</font>", _CharColor)
	ELSE
		Print(_B,"")
	ENDIF
	IF "c1"
		CharacterHasTalent(_Char,WalkItOff)
	THEN
		Add(_CharBonus,3)
		Print(_C," + 3[1] walk it off</font>", _CharColor)
	ELSE
		Print(_C,"")
	ENDIF
	IF "c1"
		IsGreaterThen(_PersInt,0)
	THEN
		Print(_D," + [1][2] pers.</font>", _PersInt, _CharColor)
	ELSE
		Print(_D, "")
	ENDIF
	IF "c1"
		IsGreaterThen(%ResolveLevel,0)
	THEN
		IF "!c1&c2"
			CharacterIsInParty(_Char)
			IsHardcore()
		THEN
			Set(_Resolve,%ResolveLevel)
			Multiply(_Resolve,5)
			Add(_CharBonus,_Resolve)
			Print(_E," + [2] [1]resolve</font>", _CharColor, _Resolve)
		ELSE
			Print(_E, "")
		ENDIF
	ELSE
		Print(_E, "")
	ENDIF
	Print(_CharTalents, "[1][2][3][4]", _B, _C, _D, _E)
	Add(_CharBonus,_PersInt)
//-----------Char-Advantage-----------//
	IF "c1"
		CharacterHasStatus(_Char,BLESSED)
	THEN
		Add(_CharAdv,1)
		Print(_A," | <font color='#46b195'>blessed</font>")
	ELSE
		Print(_A,"")
	ENDIF
	IF "c1"
		IsTagged(_Char,"ABST_BOSS")
	THEN
		IF "c1&!c2"
			IsHardcore()
			HasGlobalFlag("ABST_NoBossBoost")
		THEN
			Add(_CharAdv,1)
			Print(_B," | [1]advantageous</font>", _CharColor)
		ELSE
			Print(_B,"")
		ENDIF
	ELSE
		Print(_B,"")
	ENDIF
	IF "c1"
		HasFlag(_Char,"ABST_DuckFlag")
	THEN
		Add(_CharAdv,1)
		Print(_C," | [1]duck duck goose</font>", _CharColor)
	ELSE
		Print(_C,"")
	ENDIF
	IF "c1"
		CharacterHasTalent(_Char,Escapist)
	THEN
		IF "c1"
			CharacterHasStatus(_Char,FLANKED)
		THEN
			Add(_CharAdv,1)
			Print(_D," | [1]escapist</font>", _CharColor)
		ELSE
			Print(_D,"")
		ENDIF
	ELSE
		Print(_D,"")
	ENDIF
	IF "c1"
		CharacterHasStatus(_Char,ABST_FSDM)
	THEN
		Add(_CharAdv,1)
		Set(_Status,ABST_FSDM)
		SetVar(_Char,"ScrubbedStatus",_Status)
		CharacterEvent(_Char,"CharacterRemoveStatus")
		Print(_E," | [1]five star diner</font>", _CharColor)
	ELSE
		Print(_E,"")
	ENDIF
	IF "c1"
		CharacterHasStatus(_Char,LEADERSHIP)
	THEN
		IF "c1&c2&c3"
			CharacterGetStatusSourceCharacter(_Char,LEADERSHIP,_Leader)
			CharacterGetAbility(_StatInt,_Leader,Leadership)
			CharacterIsAlly(_Leader,_Char)
		THEN
			Multiply(_StatInt,4)
			GetRandomBetween(_Roll,1,100)
			IF "c1"
				IsLessThen(_Roll,_StatInt)
			THEN
				Add(_CharAdv,1)
				Print(_F," | [1]leadership</font>", _CharColor)
			ELSE
				Print(_F,"")
			ENDIF
		ELSE
			Print(_F,"")
		ENDIF
	ELSE
		Print(_F,"")
	ENDIF
	IF "c1"
		HasFlag(_Char,"ABST_LivingFlag")
	THEN
		Add(_CharAdv,1)
		Print(_G," | [1]living armour</font>", _CharColor)
	ELSE
		Print(_G,"")
	ENDIF
	IF "c1"
		HasFlag(_Char,"ABST_MnemonicFlag")
	THEN
		Print(_H," | [1]mnemonic</font>", _CharColor)
	ELSE
		Print(_H,"")
	ENDIF
	IF "c1"
		HasFlag(_Char,"ABST_MorningFlag")
	THEN
		IF "c1"
			CharacterHasStatus(_Char,ABST_AEGIS)
		THEN
			Add(_CharAdv,1)
			Print(_I," | [1]escapist</font>", _CharColor)
			CharacterRemoveStatus(_Char,ABST_AEGIS,null,0)
			Print(_J,"")
		ELSE
			Add(_CharAdv,1)
			Print(_I,"")
			Print(_J," | [1]morning person</font>", _CharColor)
			CharacterRemoveStatus(_Char,ABST_MORNING,null,0)
		ENDIF
	ELSE
		Print(_J,"")
		Print(_I,"")
	ENDIF
	IF "c1"
		CharacterHasStatus(_Char,CURSED)
	THEN
		Subtract(_CharAdv,1)
		Print(_K," | <font color='#d040d0'>cursed</font>")
	ELSE
		Print(_K,"")
	ENDIF
	IF "c1"
		CharacterHasStatus(_Char,ABST_MAGUS)
	THEN
		Set(_Status,ABST_MAGUS)
		SetVar(_Char,"ScrubbedStatus",_Status)
		CharacterEvent(_Char,"CharacterRemoveStatus")
		Subtract(_CharAdv,1)
		Print(_L," | <font color='#d040d0'>ice king</font>")
	ELSE
		Print(_L,"")
	ENDIF
	Print(_CharAdvText,"[1][2][3][4][5][6][7][8][9][10][11][12]", _A, _B, _C, _D, _E, _F, _G, _H, _I, _J, _K, _L)
//-----------Caster-Bonuses-----------//
	IF "c1"
		CharacterHasTalent(_Caster,Ambidextrous)
	THEN
		IF "c1"
			CharacterHasSkill(_Caster,Target_SingleHandedAttack)
		THEN
			Add(_CasterBonus,5)
			Print(_A," + 5 [1]ambidextrous</font>", _CasterColor)
		ELSE
			Print(_A,"")
		ENDIF
	ELSE
		Print(_A,"")
	ENDIF
	IF "c1"
		CharacterHasStatus(_Caster,ARROW_CHECK_MAGIC)
	THEN
		Add(_CasterBonus,5)
		Print(_B," + 5 [1]arrow recovery</font>", _CasterColor)
	ELSE
		Print(_B,"")
	ENDIF
	IF "c1"
		CharacterHasTalent(_Caster,FaroutDude)
	THEN
		IF "c1&(c2|c3|c4|c5)"
			IsLessThen(_HighestRoll,100)
			CharacterHasWeaponType(_Caster,Bow,1)
			CharacterHasWeaponType(_Caster,Wand,1)
			CharacterHasWeaponType(_Caster,Crossbow,1)
			CharacterHasWeaponType(_Caster,Staff,1)
		THEN
			Add(_CasterBonus,5)
			Print(_C," + 5 [1]far out man</font>", _CasterColor)
		ELSE
			Print(_C,"")
		ENDIF
	ELSE
		Print(_C,"")
	ENDIF
	IF "c1"
		CharacterHasTalent(_Caster,Perfectionist)
	THEN
		IF "c1&c2"
			CharacterGetStat(_Vitality,_Caster,Vitality)
			IsEqual(_Vitality,1.0)
		THEN
			Add(_CasterBonus,3)
			Print(_D," + 3 [1]hothead</font>", _CasterColor)
		ELSE
			Print(_D,"")
		ENDIF
	ELSE
		Print(_D,"")
	ENDIF
	IF "c1"
		CharacterHasTalent(_Caster,AttackOfOpportunity)
	THEN
		IF "c1&!c2&!c3&!c4&c5"
			CharacterHasWeaponType(_Caster,Bow,1)
			CharacterHasWeaponType(_Caster,Wand,1)
			CharacterHasWeaponType(_Caster,Crossbow,1)
			CharacterHasWeaponType(_Caster,Staff,1)
			IsLessThen(_HighestRoll,100)
		THEN
			Add(_CasterBonus,5)
			Print(_E," + 5 [1]opportunist</font>", _CasterColor)
		ELSE
			Print(_E,"")
		ENDIF
	ELSE
		Print(_E,"")
	ENDIF
	IF "c1"
		CharacterHasStatus(_Caster,GRENADE_CHECK_MAGIC)
	THEN
		IF "!c1"
			CharacterIsAlly(_Char,_Caster)
		THEN
			Add(_CasterBonus,5)
			Print(_G," + 5 [1]slingshot</font>", _CasterColor)
		ELSE
			Subtract(_CasterBonus,5)
			Print(_G," - 5 [1]slingshot</font>", _CasterColor)
		ENDIF
	ELSE
		Print(_G,"")
	ENDIF
	IF "c1"
		CharacterHasTalent(_Caster,DualWieldingDodging)
	THEN
		IF "c1&!c2&!c3&c4"
			CharacterHasWeaponType(_Caster,Wand,1)
			CharacterHasSkill(_Caster,Target_SingleHandedAttack)
			CharacterHasSkill(_Caster,Shout_RecoverArmour)
			IsGreaterThen(%DualCounter,0)
		THEN
			Set(_Parry,%DualCounter)		
			Multiply(_Parry,3)
			Add(_CasterBonus,_Parry)
			Print(_H," + [2] [1]parry master</font>", _CasterColor, _Parry)
		ELSE
			Print(_H,"")
		ENDIF
	ELSE
		Print(_H,"")
	ENDIF
	IF "c1"
		CharacterHasTalent(_Caster,Torturer)
	THEN
		IF "c1"
			HasFlag(_Char,"ABST_TorturerFlag")
		THEN
			Add(_CasterBonus,5)
			Print(_I," + 5 [1]torturer</font>", _CasterColor)
		ELSE
			Print(_I,"")
		ENDIF
	ELSE
		Print(_I,"")
	ENDIF
	IF "c1"
		CharacterHasTalent(_Caster,Unstable)
	THEN
		IF "c1"
			HasFlag(_Char,"ABST_UnstableFlag")
		THEN
			IF "c1&c2"
				GetVar(_Unstable,_Char,"UnstableCounter")
				IsGreaterThen(_Unstable,0)
			THEN
				Multiply(_Unstable,5)
				Add(_Unstable,5)
			ELSE
				Set(_Unstable,5)
			ENDIF
								Add(_CasterBonus,_Unstable)
			Print(_J," + [2] [1]vindictive</font>", _CasterColor, _Unstable)
		ELSE
			Print(_J,"")
		ENDIF
	ELSE
		Print(_J,"")
	ENDIF
	IF "c1"
		CharacterGetAbility(_RetInt,_Caster,Reflection)
	THEN
		IF "c1"
			IsGreaterThen(_RetInt,0)
		THEN
			Print(_K," + [1] [2]ret.</font>", _RetInt, _CasterColor)
		ELSE
			Print(_K, "")
		ENDIF
	ENDIF
	Print(_CasterTalents,"[1][2][3][4][5][6][7][8][9][10]",  _A, _B, _C, _D, _E, _G, _H, _I, _J, _K)
	Add(_CasterBonus,_RetInt)
//-----------Caster-Advantage-------//
	IF "c1"
		CharacterHasStatus(_Caster,BLESSED)
	THEN
		Add(_CasterAdv,1)
		Print(_A," | <font color='#46b195'>blessed</font>")
	ELSE
		Print(_A,"")
	ENDIF
	IF "c1"
		IsTagged(_Char,"ABST_BOSS")
	THEN
			IF "c1&!c2"
				IsHardcore()
				HasGlobalFlag("ABST_NoBossBoost")
		THEN
			Add(_CharAdv,1)
			Print(_B," | [1]advantageous</font>", _CharColor)
		ELSE
			Print(_B,"")
		ENDIF
	ELSE
		Print(_B,"")
	ENDIF
	IF "c1"
		CharacterHasTalent(_Caster,Demon)
	THEN
		IF "c1"
			HasFlag(_Char,"ABST_SurfaceFlag")
		THEN
			Add(_CasterAdv,1)
			Print(_C," | [1]demon</font>", _CasterColor)
		ELSE
			Print(_C,"")
		ENDIF
	ELSE
		Print(_C,"")
	ENDIF
	IF "c1"
		CharacterHasTalent(_Caster, ElementalRanger)
	THEN
		IF "c1&(c2|c3)"
			IsLessThen(_HighestRoll,100)
			CharacterHasWeaponType(_Caster,Bow,1)
			CharacterHasWeaponType(_Caster,Crossbow,1)
		THEN
			Add(_CasterAdv,1)
			Print(_D," | [1]elemental ranger</font>", _CasterColor)
		ELSE
			Print(_D,"")
		ENDIF
	ELSE
		Print(_D,"")
	ENDIF
	IF "c1"
		CharacterHasStatus(_Caster,ABST_EXEC)
	THEN
		Add(_CasterAdv,1)
		Print(_E," | [1]executioner</font>", _CasterColor)
		Set(_Status,ABST_EXEC)
		SetVar(_Caster,"ScrubbedStatus",_Status)
		CharacterEvent(_Caster,"CharacterRemoveStatus")
	ELSE
		Print(_E,"")
	ENDIF
	IF "c1"
		CharacterHasStatus(_Caster,ABST_GUERILLA)
	THEN
		Add(_CasterAdv,1)
		Print(_F," | [1]guerrilla</font>", _CasterColor)
		Set(_Status,ABST_GUERILLA)
		SetVar(_Caster,"ScrubbedStatus",_Status)
		CharacterEvent(_Caster,"CharacterRemoveStatus")
	ELSE
		Print(_F,"")
	ENDIF
	IF "c1"
		CharacterHasStatus(_Char,LEADERSHIP)
	THEN
		IF "c1&c2&c3&c4"
			CharacterGetStatusSourceCharacter(_Char,LEADERSHIP,_Leader)
			CharacterGetAbility(_StatInt,_Leader,Leadership)
			CharacterIsAlly(_Leader,_Char)
			CharacterHasTalent(_Leader,Escapist)
		THEN
			Multiply(_StatInt,4)
			GetRandomBetween(_Roll,1,100)
			IF "c1"
				IsLessThen(_Roll,_StatInt)
			THEN
				Add(_CharAdv,1)
				Print(_G," | [1]leadership</font>", _CharColor)
			ELSE
				Print(_G,"")
			ENDIF
		ELSE
			Print(_G,"")
		ENDIF
	ELSE
		Print(_G,"")
	ENDIF
	IF "c1"
		HasFlag(_Char,"ABST_SavageFlag")
	THEN
		IF "c1"
			CharacterHasTalent(_Caster,ViolentMagic)
		THEN
			Print(_H," | [1]savage sortilege</font> (if applying cursed)", _CasterColor)
			Add(_CharAdv,1)
		ELSE
			Print(_H,"")
		ENDIF
	ELSE
		Print(_H,"")
	ENDIF
	IF "c1"
		CharacterHasStatus(_Caster,ABST_RUSH)
	THEN
		Add(_CasterAdv,1)
		Print(_I," | [1]what a rush</font>", _CasterColor)
		Set(_Status,ABST_RUSH)
		SetVar(_Caster,"ScrubbedStatus",_Status)
		CharacterEvent(_Caster,"CharacterRemoveStatus")
	ELSE
		Print(_I,"")
	ENDIF
	IF "c1"
		CharacterHasStatus(_Caster,CURSED)
	THEN
		Subtract(_CasterAdv,1)
		Print(_J," | <font color='#d040d0'>cursed</font>")
	ELSE
		Print(_J,"")
	ENDIF
	IF "c1"
		CharacterHasStatus(_Caster,ABST_ALLIN)
	THEN
		Subtract(_CasterAdv,1)
		Print(_K," | <font color='#d040d0'>slingshot</font>")
		Set(_Status,ABST_ALLIN)
		SetVar(_Caster,"ScrubbedStatus",_Status)
		CharacterEvent(_Caster,"CharacterRemoveStatus")
	ELSE
		Print(_K,"")
	ENDIF
	Print(_CasterAdvText,"[1][2][3][4][5][6][7][8][9][10][11]", _A, _B, _C, _D, _E, _F, _G, _H, _I, _J, _K)
//-----------Home-Stretch-----------//
	IF "!c1&c2"
		CharacterHasTalent(_Char,Raistlin)
		IsGreaterThen(_ArmorFloat,.005)
	THEN
		Multiply(_ArmorFloat,100)
		Cast(_ArmorInt,_ArmorFloat)
		Print(_A, "[1]% <font color='#64c1ea' size='14'>magical armor</font> ", _ArmorInt)
	ELSE
		Print(_A, "")
		Set(_ArmorInt,0)
	ENDIF
//	Multiply(_StatFloat,.5)
//	Cast(_StatInt,_StatFloat)
//	Add(_CharBonus,_StatInt)
	Add(_DeflectInt,_ArmorInt)
	Add(_DeflectInt,_CharBonus)
	GetRandomBetween(_Roll,1,_HighestRoll)
	Set(_PrintRoll,_Roll)
	Add(_Roll,_CasterBonus)
	GetRandomBetween(_Roll2,1,_HighestRoll)
	Set(_PrintRoll2,_Roll2)
	Add(_Roll2,_CasterBonus)
	IF "c1"
		IsGreaterThen(_CasterAdv,_CharAdv)
	THEN
		Print(_B, " with advantage")
		IF "(c1|c2)&(c3|c4)"
			IsLessThen(_Roll,_DeflectInt)
			IsEqual(_Roll,_DeflectInt)
			IsLessThen(_Roll2,_DeflectInt)
			IsEqual(_Roll2,_DeflectInt)
		THEN
			Set(_Saved,1)
		ENDIF
//------------------//
		IF "c1"
			IsLessThen(_PrintRoll,_PrintRoll2)
		THEN
			Print(_C, "<font color='#aaafb4'>[1],</font>[2]", _PrintRoll, _PrintRoll2)
			Set(_FinalRoll,_Roll2)
		ELIF "c1"
			IsGreaterThen(_PrintRoll,_PrintRoll2)
		THEN
			Print(_C, "<font color='#aaafb4'>[1],</font>[2]", _PrintRoll2, _PrintRoll)
			Set(_FinalRoll,_Roll)
		ELSE
			Print(_C, "[1], [2]", _PrintRoll2, _PrintRoll)
			Set(_FinalRoll,_Roll)
		ENDIF
//------------------//
	ELIF "c1"
		IsGreaterThen(_CharAdv,_CasterAdv)
	THEN
		Print(_B, " with disadvantage")
		IF "(c1|c2)|(c3|c4)"
			IsLessThen(_Roll,_DeflectInt)
			IsEqual(_Roll,_DeflectInt)
			IsLessThen(_Roll2,_DeflectInt)
			IsEqual(_Roll2,_DeflectInt)
		THEN
			Set(_Saved,1)
		ENDIF
//------------------//
		IF "c1"
			IsLessThen(_PrintRoll2,_PrintRoll)
		THEN
			Print(_C, "<font color='#aaafb4'>[1],</font>[2]", _PrintRoll, _PrintRoll2)
			Set(_FinalRoll,_Roll2)
		ELIF "c1"
			IsGreaterThen(_PrintRoll2,_PrintRoll)
		THEN
			Print(_C, "<font color='#aaafb4'>[1],</font>[2]", _PrintRoll2, _PrintRoll)
			Set(_FinalRoll,_Roll)
		ELSE
			Print(_C, "[1], [2]", _PrintRoll2, _PrintRoll)
			Set(_FinalRoll,_Roll)
		ENDIF
//------------------//
	ELSE
	Print(_B, "")
	Set(_FinalRoll,_Roll)
	Print(_C, "[1]", _PrintRoll)
		IF "c1|c2"
			IsLessThen(_Roll,_DeflectInt)
			IsEqual(_Roll,_DeflectInt)
		THEN
			Set(_Saved,1)
		ENDIF
	ENDIF
	IF "c1&c2"
		GetVar(_D,_Char,"NameString")
		GetVar(_E,_Caster,"NameString")
	THEN
	ENDIF
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		IF "c1"
			IsEqual(_HighestRoll,100)
		THEN	
			CharacterPlayEffect(_Char,"FX_GP_Combat_Hit_MagicalArmor_01")
			Print(_F, "[1] resisted! ([2]%)", %StatusString1, _DeflectInt)	
			Cast(_FixedString,_F)
			StatusText(_Char,_FixedString)
		ENDIF
//		Print(_F, "[1][2]</font> resisted [4][5]</font>'s [3] attempt:<font size='14'> [6] to resist &gt; [7] to apply<br>     [1]{ </font>[8][9] [1]wits bonus</font>[10][11]<br>     [4]{ </font>[12] rolled <font color='#aaafb4'>(out of [16])</font>[13][14][15]</font>", _CharColor, _D, %StatusString1, _CasterColor, _E, _DeflectInt, _FinalRoll, _A, _StatInt, _CharTalents, _CharAdvText, _C, _B, _CasterTalents, _CasterAdvText, _HighestRoll)
		Print(_F, "[1][2]</font> resisted [4][5]</font>'s [3] attempt:<font size='14'> [6] to resist &gt; [7] to apply<br>     [1]{ </font>[8][9][10]<br>     [4]{ </font>[11] rolled <font color='#aaafb4'>[15]</font>[12][13][14]</font>", _CharColor, _D, %StatusString1, _CasterColor, _E, _DeflectInt, _FinalRoll, _A, _CharTalents, _CharAdvText, _C, _B, _CasterTalents, _CasterAdvText, _M)
	ELSE
//		Print(_F, "[1][2]</font>[3] by [4][5]</font>:<font size='14'> [6] to resist &lt; [7] to apply<br>     [1]{ </font>[8][9] [1]wits bonus</font>[10][11]<br>     [4]{ </font>[12] rolled <font color='#aaafb4'>(out of [16])</font>[13][14][15]</font>", _CharColor, _D, %StatusString2, _CasterColor, _E, _DeflectInt, _FinalRoll, _A, _StatInt, _CharTalents, _CharAdvText, _C, _B, _CasterTalents, _CasterAdvText, _HighestRoll)
		Print(_F, "[1][2]</font>[3] by [4][5]</font>:<font size='14'> [6] to resist &lt; [7] to apply<br>     [1]{ </font>[8][9][10]<br>     [4]{ </font>[11] rolled <font color='#aaafb4'>[15]</font>[12][13][14]</font>", _CharColor, _D, %StatusString2, _CasterColor, _E, _DeflectInt, _FinalRoll, _A, _CharTalents, _CharAdvText, _C, _B, _CasterTalents, _CasterAdvText, _M)
	ENDIF
	Cast(_FixedString,_F)
	IF "!c1"
		CharacterHasTalent(_Char,Raistlin)
	THEN
		CombatLogText(_Char, _FixedString, 0, 1)
	ENDIF
	Set(%Saved,_Saved)

//===========================================================//
//                 ABST Status Overrides                    *//
//===========================================================//

EVENT ABSTCharacterSetBurning
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_BURNING)
ACTIONS
	ListClear(_RemoveList)	
	IF "c1"
		HasFlag(_Character,"ABST_SurfaceFlag")
	THEN
		IF "c1"
			CharacterHasTalent(_Character,NoAttackOfOpportunity)
		THEN
			SetFlag(_Character,"ABST_DuckFlag")
		ENDIF
		
	ENDIF
	IF "c1&!c2"
		CharacterHasStatus(_Character, WET)
		CharacterHasStatus(_Character, WARM)
	THEN
		ListAdd(_RemoveList, WET)
		Set(_Result, WARM)
	ELIF "c1&c2"
		CharacterHasStatus(_Character, WET)
		CharacterHasStatus(_Character, WARM)
	THEN
		ListAdd(_RemoveList, WET)
	ELIF "c1"
		CharacterHasStatus(_Character, CHILLED)
	THEN
		ListAdd(_RemoveList,CHILLED)
		Set(_Result, WARM)
	ELIF "c1"
		CharacterHasStatus(_Character, FROZEN)
	THEN
		ListAdd(_RemoveList,FROZEN)
		Set(_Result, WET)
	ELIF "c1|c2"
		CharacterHasStatus(_Character, NECROFIRE)
		CharacterHasStatus(_Character, HOLY_FIRE)
	THEN
		Set(_Result,null)
	ELSE
		Print(%StatusString1,"<font color='#fe6e27'>Burning</font>")
		Print(%StatusString2," was <font color='#fe6e27'>Burned</font>")
		SetFlag(_Character,"ABST_TorturerFlag")
		Set(_Result,OVR_BURNING)
		Set(%Char,_Character)
		CallFunction("MagicArmorTally")
		Set(_Saved,%Saved)
		IF "c1"
			IsEqual(_Saved,1)
		THEN
			Set(_Result,null)
		ENDIF
	ENDIF
	ClearFlag(_Character,"ABST_SurfaceFlag")
	ClearFlag(_Character,"ABST_DuckFlag")
	ClearFlag(_Character,"ABST_TorturerFlag")
	RETURN(_RemoveList,_Result,2)

EVENT ABSTCharacterSetNecrofire
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_NECROFIRE)
ACTIONS
	ListClear(_RemoveList)
	IF "c1"
		HasFlag(_Character,"ABST_SurfaceFlag")
	THEN
		IF "c1"
			CharacterHasTalent(_Character,NoAttackOfOpportunity)
		THEN
			SetFlag(_Character,"ABST_DuckFlag")
		ENDIF
		
	ENDIF
	ListAdd(_RemoveList, CHILLED)
	ListAdd(_RemoveList, WET)
	ListAdd(_RemoveList, FROZEN)
	Print(%StatusString1,"<font color='#fe6e27'>Necrofire</font>")
	Print(%StatusString2," was lit with <font color='#fe6e27'>Necrofire</font>")		
	SetFlag(_Character,"ABST_TorturerFlag")
	IF "c1"
		CharacterHasTalent(_Character,LivingArmor)
	THEN
		SetFlag(_Character,"ABST_LivingFlag")
	ENDIF
	Set(_Result,OVR_NECROFIRE)
	Set(%Char,_Character)
	CallFunction("MagicArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN	
		Set(_Result,null)
	ENDIF
	ClearFlag(_Character,"ABST_SurfaceFlag")
	ClearFlag(_Character,"ABST_TorturerFlag")
	ClearFlag(_Character,"ABST_DuckFlag")
	ClearFlag(_Character,"ABST_LivingFlag")
	RETURN(_RemoveList,_Result,2)

EVENT ABSTCharacterSetChilled
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_CHILLED)
ACTIONS
	ListClear(_RemoveList)
	IF "c1"
		HasFlag(_Character,"ABST_SurfaceFlag")
	THEN
		IF "c1"
			CharacterHasTalent(_Character,NoAttackOfOpportunity)
		THEN
			SetFlag(_Character,"ABST_DuckFlag")
		ENDIF
		
	ENDIF	
	IF "c1"
		CharacterHasStatus(_Character, BURNING)
	THEN
		ListAdd(_RemoveList, BURNING)
		Set(_Result, WARM)
	ELIF "c1|c2|c3"
		CharacterHasStatus(_Character, FROZEN)
		CharacterHasStatus(_Character, NECROFIRE)
		CharacterHasStatus(_Character, HOLY_FIRE)
	THEN
		Set(_Result,null)
	ELIF "c1"
		CharacterHasStatus(_Character, WARM)
	THEN
		ListAdd(_RemoveList, WARM)
		Set(_Result,null)
	ELIF "c1"
		CharacterHasStatus(_Character, CHILLED)
	THEN
		Set(_Result, OVR_FROZEN)
	ELSE
		Print(%StatusString1,"<font color='#cfecff'>Chilled</font>")
		Print(%StatusString2," was [1]", %StatusString1)		
		Set(_Result,OVR_CHILLED)
		Set(%Char,_Character)
		CallFunction("MagicArmorTally")
		Set(_Saved,%Saved)
		IF "c1"
			IsEqual(_Saved,1)
		THEN
			Set(_Result,null)
		ELIF "c1"
			CharacterHasStatus(_Character, WET)
		THEN
			Set(_Result, OVR_FROZEN)
		ENDIF
	ENDIF
	ClearFlag(_Character,"ABST_SurfaceFlag")
	ClearFlag(_Character,"ABST_DuckFlag")
	RETURN(_RemoveList,_Result,2)

EVENT ABSTCharacterSetFrozen
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_FROZEN)
ACTIONS
	ListClear(_RemoveList)
	IF "c1"
		HasFlag(_Character,"ABST_SurfaceFlag")
	THEN
		IF "c1"
			CharacterHasTalent(_Character,NoAttackOfOpportunity)
		THEN
			SetFlag(_Character,"ABST_DuckFlag")
		ENDIF
		
	ENDIF
	IF "c1"
		CharacterHasStatus(_Character, FROZEN)
	THEN
		Set(_Result,null)
	ELIF "c1"
		CharacterHasStatus(_Character, BURNING)
	THEN
		ListAdd(_RemoveList, BURNING)
		Set(_Result, WET)
	ELIF "c1|c2"
		CharacterHasStatus(_Character, NECROFIRE)
		CharacterHasStatus(_Character, HOLY_FIRE)
	THEN
		Set(_Result,null)
	ELIF "c1"
		CharacterHasStatus(_Character, WARM)
	THEN
		ListAdd(_RemoveList, WARM)
		Set(_Result, OVR_CHILLED)
	ELSE
		Print(%StatusString1,"<font color='#cfecff'>Frozen</font>")
		Print(%StatusString2," was [1]", %StatusString1)		
		IF "c1|c2"
			CharacterHasStatus(_Character,ABST_AEGIS)
			CharacterHasStatus(_Character,ABST_MORNING)
		THEN
			SetFlag(_Character,"ABST_MorningFlag")
		ENDIF
		Set(_Result,OVR_FROZEN)
		Set(%Char,_Character)
		IF "c1"
			CharacterHasStatus(_Character, MAGIC_SHELL)
		THEN
			Set(%StatusString2,"'s <font color='#4197e2'>Magic Shell</font> was purged")		
		ENDIF
		CallFunction("MagicArmorTally")
		Set(_Saved,%Saved)
		IF "c1"
			IsEqual(_Saved,1)
		THEN
			Set(_Result,null)
		ELIF "c1"
			CharacterHasStatus(_Character, MAGIC_SHELL)
		THEN
			ListClear(_RemoveList)
			ListAdd(_RemoveList, MAGIC_SHELL)
			Set(_Result,null)
		ENDIF
	ENDIF
	ClearFlag(_Character,"ABST_SurfaceFlag")
	ClearFlag(_Character,"ABST_DuckFlag")
	ClearFlag(_Character,"ABST_MorningFlag")
	RETURN(_RemoveList,_Result,1)

EVENT ABSTCharacterSetPetrified
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_PETRIFIED)
ACTIONS
	ListClear(_RemoveList)
	IF "c1"
		CharacterHasStatus(_Character, PETRIFIED)
	THEN
		Set(_Result,null)
	ELIF "c1|c2"
		CharacterHasStatus(_Character,ABST_AEGIS)
		CharacterHasStatus(_Character,ABST_MORNING)
	THEN
		SetFlag(_Character,"ABST_MorningFlag")
	ENDIF
	Print(%StatusString1,"<font color='#7f3d00'>Petrified</font>")
	Print(%StatusString2," was [1]", %StatusString1)		
	Set(_Result,OVR_PETRIFIED)
	Set(%Char,_Character)
	IF "c1"
		CharacterHasStatus(_Character, BLESSED)
	THEN
		Set(%StatusString2,"'s <font color='#46b195'>Blessing</font> was purged")		
	ENDIF
	IF "c1"
		CharacterHasStatus(_Character, MAGIC_SHELL)
	THEN
		Set(%StatusString2,"'s <font color='#4197e2'>Magic Shell</font> was purged")		
	ENDIF
	CallFunction("MagicArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ELIF "c1"
		CharacterHasStatus(_Character, MAGIC_SHELL)
	THEN
		ListClear(_RemoveList)
		ListAdd(_RemoveList, MAGIC_SHELL)
		Set(_Result,null)
	ELIF "c1"
		CharacterHasStatus(_Character, BLESSED)
	THEN
		ListClear(_RemoveList)
		ListAdd(_RemoveList, BLESSED)
		Set(_Result,null)
	ENDIF
	ClearFlag(_Character,"ABST_MorningFlag")
	RETURN(_RemoveList,_Result,1)

EVENT ABSTCharacterSetShocked
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_SHOCKED)
ACTIONS
	ListClear(_RemoveList)
	IF "c1"
		HasFlag(_Character,"ABST_SurfaceFlag")
	THEN
		IF "c1"
			CharacterHasTalent(_Character,NoAttackOfOpportunity)
		THEN
			SetFlag(_Character,"ABST_DuckFlag")
		ENDIF
		
	ENDIF	
	IF "c1|c2"
		CharacterHasStatus(_Character, STUNNED)
		CharacterHasStatus(_Character, PETRIFIED)
	THEN
		Set(_Result,null)
	ELIF "c1"
		CharacterHasStatus(_Character, SHOCKED)
	THEN
		Set(_Result,OVR_STUNNED)
	ELSE
		Print(%StatusString1,"<font color='#7d71d9'>Shocked</font>")
		Print(%StatusString2," was [1]", %StatusString1)		
		Set(_Result,OVR_SHOCKED)
		Set(%Char,_Character)
		IF "c1"
			CharacterHasStatus(_Character, MAGIC_SHELL)
		THEN
			Set(%StatusString2,"'s <font color='#4197e2'>Magic Shell</font> was purged")		
		ENDIF
		CallFunction("MagicArmorTally")
		Set(_Saved,%Saved)
		IF "c1"
			IsEqual(_Saved,1)
		THEN
			Set(_Result,null)
		ELIF "c1"
			CharacterHasStatus(_Character, MAGIC_SHELL)
		THEN
			ListAdd(_RemoveList, MAGIC_SHELL)
			Set(_Result,null)
		ELIF "c1"
			CharacterHasStatus(_Character, WET)
		THEN
			Set(_Result,OVR_STUNNED)
		ENDIF
	ENDIF
	ClearFlag(_Character,"ABST_SurfaceFlag")
	ClearFlag(_Character,"ABST_DuckFlag")
	RETURN(_RemoveList,_Result,2)

EVENT ABSTCharacterSetStunned
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_STUNNED)
ACTIONS
	IF "c1"
		HasFlag(_Character,"ABST_SurfaceFlag")
	THEN
		IF "c1"
			CharacterHasTalent(_Character,NoAttackOfOpportunity)
		THEN
			SetFlag(_Character,"ABST_DuckFlag")
		ENDIF
		
	ENDIF
	IF "c1|c2"
		CharacterHasStatus(_Character,ABST_AEGIS)
		CharacterHasStatus(_Character,ABST_MORNING)
	THEN
		SetFlag(_Character,"ABST_MorningFlag")
	ENDIF
	Print(%StatusString1,"<font color='#7d71d9'>Stunned</font>")
	Print(%StatusString2," was [1]", %StatusString1)		
	Set(_Result,OVR_STUNNED)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	IF "c1"
		CharacterHasStatus(_Character, BLESSED)
	THEN
		Set(%StatusString2,"'s <font color='#46b195'>Blessing</font> was purged")
	ENDIF
	IF "c1"
		CharacterHasStatus(_Character, MAGIC_SHELL)
	THEN
		Set(%StatusString2,"'s <font color='#4197e2'>Magic Shell</font> was purged")
	ENDIF
	CallFunction("MagicArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ELIF "c1"
		CharacterHasStatus(_Character, MAGIC_SHELL)
	THEN
		ListClear(_RemoveList)
		ListAdd(_RemoveList, MAGIC_SHELL)
		Set(_Result,null)
	ELIF "c1"
		CharacterHasStatus(_Character, BLESSED)
	THEN
		ListClear(_RemoveList)
		ListAdd(_RemoveList, BLESSED)
		Set(_Result,null)
	ENDIF
	ClearFlag(_Character,"ABST_SurfaceFlag")
	ClearFlag(_Character,"ABST_MorningFlag")
	ClearFlag(_Character,"ABST_DuckFlag")
	RETURN(_RemoveList,_Result,1)

EVENT ABSTCharacterSetSlowed
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_SLOWED)
ACTIONS
	Print(%StatusString1,"<font color='#454545'>Slowed</font>")
	Print(%StatusString2," was [1]", %StatusString1)		
	SetFlag(_Character,"ABST_UnstableFlag")
	Set(_Result,OVR_SLOWED)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	IF "c1"
		CharacterHasStatus(_Character, HASTED)
	THEN
		Set(%StatusString2,"'s <font color='#fe6e27'>Haste</font> was slackened")		
	ENDIF
	CallFunction("MagicArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ELIF "c1"
		CharacterHasStatus(_Character, HASTED)
	THEN
		ListAdd(_RemoveList, HASTED)
		Set(_Result,null)
	ENDIF
	ClearFlag(_Character,"ABST_UnstableFlag")
	RETURN(_RemoveList,_Result,2)

EVENT ABSTCharacterSetFeared
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_FEAR)
ACTIONS
	IF "c1|c2"
		CharacterHasStatus(_Character,ABST_AEGIS)
		CharacterHasStatus(_Character,ABST_MORNING)
	THEN
		SetFlag(_Character,"ABST_MorningFlag")
	ENDIF
	Print(%StatusString1,"<font color='#fcd203'>Terror</font>")
	Print(%StatusString2," was <font color='#fcd203'>Terrified</font>")		
	Set(_Result,OVR_FEAR)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	IF "c1"
		CharacterHasStatus(_Character, CLEAR_MINDED)
	THEN
		Set(%StatusString2,"'s <font color='#fe6e27'>Clear Mind</font> was troubled")		
	ENDIF
	IF "c1"
		CharacterHasStatus(_Character, ENRAGED)
	THEN
		Set(%StatusString2,"'s <font color='#c80030'>Rage</font> was cooled")		
	ENDIF
	CallFunction("MagicArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ELIF "c1|c2"
		CharacterHasStatus(_Character, CLEAR_MINDED)
		CharacterHasStatus(_Character, ENRAGED)
	THEN
		ListAdd(_RemoveList, CLEAR_MINDED)
		ListAdd(_RemoveList, ENRAGED)
		Set(_Result,null)
	ENDIF
	ClearFlag(_Character,"ABST_MorningFlag")
	RETURN(_RemoveList,_Result,1)

EVENT ABSTCharacterSetCharmed
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_CHARMED)
ACTIONS
	IF "c1|c2"
		CharacterHasStatus(_Character,ABST_AEGIS)
		CharacterHasStatus(_Character,ABST_MORNING)
	THEN
		SetFlag(_Character,"ABST_MorningFlag")
	ENDIF
	Print(%StatusString1,"<font color='#ffb8b8'>Charmed</font>")
	Print(%StatusString2," was [1]", %StatusString1)		
	Set(_Result,OVR_CHARMED)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	IF "c1"
		CharacterHasStatus(_Character, CLEAR_MINDED)
	THEN
		Set(%StatusString2,"'s <font color='#fe6e27'>Clear Mind</font> was troubled")		
	ENDIF
	IF "c1"
		CharacterHasStatus(_Character, ENRAGED)
	THEN
		Set(%StatusString2,"'s <font color='#c80030'>Rage</font> was cooled")		
	ENDIF
	CallFunction("MagicArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ELIF "c1|c2"
		CharacterHasStatus(_Character, CLEAR_MINDED)
		CharacterHasStatus(_Character, ENRAGED)
	THEN
		ListAdd(_RemoveList, CLEAR_MINDED)
		ListAdd(_RemoveList, ENRAGED)
		Set(_Result,null)
	ENDIF
	ClearFlag(_Character,"ABST_MorningFlag")
	RETURN(_RemoveList,_Result,1)

EVENT ABSTCharacterSetMuted
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_MUTED)
ACTIONS
	Print(%StatusString1,"<font color='#cfecff'>Silenced</font>")
	Print(%StatusString2," was [1]", %StatusString1)		
	IF "c1"
		CharacterHasTalent(_Character,Memory)
	THEN
		SetFlag(_Character,"ABST_MnemonicFlag")
	ENDIF
	SetFlag(_Character,"ABST_UnstableFlag")
	Set(_Result,OVR_MUTED)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	IF "c1"
		CharacterHasStatus(_Character, RESTED)
	THEN
		Set(%StatusString2,"'s <font color='#81ab00'>Rest</font> was disturbed")		
	ENDIF
	CallFunction("MagicArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ELIF "c1"
		CharacterHasStatus(_Character, RESTED)
	THEN
		ListAdd(_RemoveList, RESTED)
		Set(_Result,null)
	ENDIF
	ClearFlag(_Character,"ABST_MnemonicFlag")
	ClearFlag(_Character,"ABST_UnstableFlag")
	RETURN(_RemoveList,_Result,2)

EVENT ABSTCharacterSetBlind
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_BLIND)
ACTIONS
	IF "c1"
		HasFlag(_Character,"ABST_SurfaceFlag")
	THEN
		IF "c1"
			CharacterHasTalent(_Character,NoAttackOfOpportunity)
		THEN
			SetFlag(_Character,"ABST_DuckFlag")
		ENDIF
		
	ENDIF
	Print(%StatusString1,"<font color='#454545'>Blind</font>")
	Print(%StatusString2," was <font color='#454545'>Blinded</font>")		
	SetFlag(_Character,"ABST_UnstableFlag")
	Set(_Result,OVR_BLIND)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	IF "c1"
		CharacterHasStatus(_Character, RESTED)
	THEN
		Set(%StatusString2,"'s <font color='#81ab00'>Rest</font> was disturbed")		
	ENDIF
	CallFunction("MagicArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ELIF "c1"
		CharacterHasStatus(_Character, RESTED)
	THEN
		ListAdd(_RemoveList, RESTED)
		Set(_Result,null)
	ENDIF
	ClearFlag(_Character,"ABST_SurfaceFlag")
	ClearFlag(_Character,"ABST_UnstableFlag")
	ClearFlag(_Character,"ABST_DuckFlag")
	RETURN(_RemoveList,_Result,2)

EVENT ABSTCharacterSetCrippled
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_CRIPPLED)
ACTIONS
	Print(%StatusString1,"<font color='#ffffff'>Crippled</font>")
	Print(%StatusString2," was [1]", %StatusString1)		
	SetFlag(_Character,"ABST_UnstableFlag")
	Set(_Result,OVR_CRIPPLED)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	IF "c1"
		CharacterHasStatus(_Character, HASTED)
	THEN
		Set(%StatusString2,"'s <font color='#fe6e27'>Haste</font> was slackened")
	ENDIF
	IF "c1"
		CharacterHasStatus(_Character, RESTED)
	THEN
		Set(%StatusString2,"'s <font color='#81ab00'>Rest</font> was disturbed")
	ENDIF
	CallFunction("PhysArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ELIF "c1"
		CharacterHasStatus(_Character, RESTED)
	THEN
		ListAdd(_RemoveList, RESTED)
		Set(_Result,null)
	ELIF "c1"
		CharacterHasStatus(_Character, HASTED)
	THEN
		ListAdd(_RemoveList, HASTED)
		Set(_Result,null)
	ENDIF
	ClearFlag(_Character,"ABST_UnstableFlag")
	RETURN(_RemoveList,_Result,2)

EVENT ABSTCharacterSetKnockedDown
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_KNOCKED_DOWN)
ACTIONS
	IF "c1|c2"
		CharacterHasStatus(_Character,ABST_AEGIS)
		CharacterHasStatus(_Character,ABST_MORNING)
	THEN
		SetFlag(_Character,"ABST_MorningFlag")
	ENDIF
	Print(%StatusString1,"<font color='#ffffff'>Knocked Down</font>")
	Print(%StatusString2," was [1]", %StatusString1)		
	Set(_Result,OVR_KNOCKED_DOWN)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	IF "c1"
		CharacterHasStatus(_Character, RESTED)
	THEN
		Set(%StatusString2,"'s <font color='#81ab00'>Rest</font> was disturbed")		
	ENDIF
	CallFunction("PhysArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ELIF "c1"
		CharacterHasStatus(_Character, RESTED)
	THEN
		ListAdd(_RemoveList, RESTED)
		Set(_Result,null)
	ENDIF
	ClearFlag(_Character,"ABST_MorningFlag")
	RETURN(_RemoveList,_Result,1)

//EVENT ABSTCharacterSetRegeneration
//VARS
//	CHARACTER:_Character
//	LIST<STATUS>:_RemoveList
//	STATUS:_Result
//	STRING:_String
//	INT:_Saved
//ON
//	FetchCharacterApplyStatusData(_Character, OVR_REGENERATION)
//ACTIONS
//	ListClear(_RemoveList)
//	IF "c1"
//		HasFlag(_Character,"ABST_SurfaceFlag")
//	THEN
//		IF "c1"
//			CharacterHasTalent(_Character,NoAttackOfOpportunity)
//		THEN
//			SetFlag(_Character,"ABST_DuckFlag")
//		ENDIF
//	ENDIF	
//	IF "c1|c2"
//		IsTagged(_Character,"UNDEAD")
//		CharacterHasTalent(_Character,Zombie)
//	THEN
//		Set(_Result,OVR_REGENERATION)	
//		Print(%StatusString1,"<font color='#97fbff'>Regeneration</font>")
//		Print(%StatusString2," was <font color='#97fbff'>Regenerated</font>")
//		SetFlag(_Character,"ABST_UnstableFlag")
//		Set(%Char,_Character)
//		IF "c1"
//			CharacterHasStatus(_Character, POISONED)
//		THEN
//			Set(%StatusString2,"'s <font color='#00aa00'>Poison</font> was purged")		
//		ENDIF
//		CallFunction("PhysArmorTally")
//		Set(_Saved,%Saved)
//		IF "c1"
//			IsEqual(_Saved,1)
//		THEN
//			Set(_Result,null)
//		ELIF "c1"
//			CharacterHasStatus(_Character, POISONED)
//		THEN
//			ListAdd(_RemoveList, POISONED)
//			Set(_Result,null)
//		ENDIF
//	ELSE
//		Set(_Result,OVR_REGENERATION)	
//	ENDIF
//	ClearFlag(_Character,"ABST_SurfaceFlag")
//	ClearFlag(_Character,"ABST_UnstableFlag")
//	ClearFlag(_Character,"ABST_DuckFlag")
//	RETURN(_RemoveList,_Result,2)

EVENT ABSTCharacterSetPoisoned
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_POISONED)
ACTIONS
	ListClear(_RemoveList)
	IF "c1"
		HasFlag(_Character,"ABST_SurfaceFlag")
	THEN
		IF "c1"
			CharacterHasTalent(_Character,NoAttackOfOpportunity)
		THEN
			SetFlag(_Character,"ABST_DuckFlag")
		ENDIF
	ENDIF	
//	IF "!c1&!c2"
//		IsTagged(_Character,"UNDEAD")
//		CharacterHasTalent(_Character,Zombie)
//	THEN
		Set(_Result,OVR_POISONED)
		Print(%StatusString1,"<font color='#65c900'>Poisoned</font>")
		Print(%StatusString2," was [1]", %StatusString1)		
		SetFlag(_Character,"ABST_TorturerFlag")
		Set(%Char,_Character)
		IF "c1"
			CharacterHasStatus(_Character, REGENERATION)
		THEN
			Set(%StatusString2,"'s <font color='#97fbff'>Regeneration</font> was purged")		
		ENDIF
		CallFunction("MagicArmorTally")
		Set(_Saved,%Saved)
		IF "c1"
			IsEqual(_Saved,1)
		THEN
			Set(_Result,null)
		ELIF "c1"
			CharacterHasStatus(_Character, REGENERATION)
		THEN
			ListAdd(_RemoveList, REGENERATION)
			Set(_Result,null)
		ENDIF
//	ELSE
//		ListAdd(_RemoveList, REGENERATION)
//		Set(_Result,POISONED)
//	ENDIF
	ClearFlag(_Character,"ABST_SurfaceFlag")
	ClearFlag(_Character,"ABST_TorturerFlag")
	ClearFlag(_Character,"ABST_DuckFlag")
	RETURN(_RemoveList,_Result,2)

EVENT ABSTCharacterSetBleeding
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_BLEEDING)
ACTIONS
	Print(%StatusString1,"<font color='#ffffff'>Bleeding</font>")	
	Print(%StatusString2," was <font color='#ffffff'>Bled</font>")		
	SetFlag(_Character,"ABST_TorturerFlag")
	Set(_Result,OVR_BLEEDING)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	IF "c1"
		CharacterHasStatus(_Character, FORTIFIED)
	THEN
		Set(%StatusString2,"'s <font color='#7f3d00'>Fortification</font> was punctured")		
	ENDIF
	IF "c1"
		CharacterHasStatus(_Character, REGENERATION)
	THEN
		Set(%StatusString2,"'s <font color='#97fbff'>Regeneration</font> was purged")		
	ENDIF
	CallFunction("PhysArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ELIF "c1"
		CharacterHasStatus(_Character, REGENERATION)
	THEN
		ListAdd(_RemoveList, REGENERATION)
		Set(_Result,null)
	ELIF "c1"
		CharacterHasStatus(_Character, FORTIFIED)
	THEN
		ListAdd(_RemoveList, FORTIFIED)
		Set(_Result,null)
	ENDIF
	ClearFlag(_Character,"ABST_TorturerFlag")
	RETURN(_RemoveList,_Result,2)

EVENT ABSTCharacterSetCursed
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_CURSED)
ACTIONS
	SetFlag(_Character,"ABST_SavageFlag")
	Print(%StatusString1,"<font color='#46b195'>Cursed</font>")
	Print(%StatusString2," was [1]", %StatusString1)		
	SetFlag(_Character,"ABST_UnstableFlag")
	Set(_Result,OVR_CURSED)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	IF "c1"
		CharacterHasStatus(_Character, WARM)
	THEN
		Set(%StatusString2,"'s <font color='#fe6e27'>Warmth</font> was intensified")		
	ENDIF
	IF "c1"
		CharacterHasStatus(_Character, HOLY_FIRE)
	THEN
		Set(%StatusString2,"'s <font color='#fe6e27'>Holy Fire</font> was corrupted")		
	ENDIF
	IF "c1"
		CharacterHasStatus(_Character, BURNING)
	THEN
		Set(%StatusString2,"'s <font color='#fe6e27'>Burning</font> was blighted")		
	ENDIF
	IF "c1"
		CharacterHasStatus(_Character, CHILLED)
	THEN
		Set(%StatusString2,"'s <font color='#cfecff'>Chill</font> was intensified")		
	ENDIF
	IF "c1"
		CharacterHasStatus(_Character, BLESSED)
	THEN
		Set(%StatusString2,"'s <font color='#46b195'>Blessing</font> was purged")		
	ENDIF
	CallFunction("MagicArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ELIF "c1"
		CharacterHasStatus(_Character, BLESSED)
	THEN
		ListAdd(_RemoveList, BLESSED)
		Set(_Result,null)
	ELIF "c1|c2"
		CharacterHasStatus(_Character, CHILLED)
		CharacterHasStatus(_Character, OVR_CHILLED)
	THEN
		ListAdd(_RemoveList, CHILLED)
		Set(_Result, FROZEN)
		CharacterApplyStatus(_Character,null)
	ELIF "c1"
		CharacterHasStatus(_Character, BURNING)
	THEN
		ListAdd(_RemoveList, BURNING)
		Set(_Result, NECROFIRE)
		CharacterApplyStatus(_Character,null)
	ELIF "c1|c2"
		CharacterHasStatus(_Character, WARM)
		CharacterHasStatus(_Character, HOLY_FIRE)
	THEN
		ListAdd(_RemoveList, WARM)
		ListAdd(_RemoveList, HOLY_FIRE)
		Set(_Result, BURNING)
		CharacterApplyStatus(_Character,null)
	ENDIF
	ClearFlag(_Character,"ABST_SavageFlag")
	ClearFlag(_Character,"ABST_UnstableFlag")
	RETURN(_RemoveList,_Result,2)

EVENT ABSTCharacterSetDiseased
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_DISEASED)
ACTIONS
	Print(%StatusString1,"<font color='#7f00ff'>Diseased</font>")
	Print(%StatusString2," was [1]", %StatusString1)		
	SetFlag(_Character,"ABST_UnstableFlag")
	Set(_Result,OVR_DISEASED)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	IF "c1"
		CharacterHasStatus(_Character, BLESSED)
	THEN
		Set(%StatusString2,"'s <font color='#46b195'>Blessing</font> was purged")		
	ENDIF
	IF "c1"
		CharacterHasStatus(_Character, FORTIFIED)
	THEN
		Set(%StatusString2,"'s <font color='#7f3d00'>Fortification</font> was purged")		
	ENDIF
	CallFunction("PhysArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ELIF "c1"
		CharacterHasStatus(_Character, FORTIFIED)
	THEN
		ListAdd(_RemoveList, FORTIFIED)
		Set(_Result,null)
	ELIF "c1"
		CharacterHasStatus(_Character, BLESSED)
	THEN
		ListAdd(_RemoveList, BLESSED)
		Set(_Result,null)
	ENDIF
	ClearFlag(_Character,"ABST_UnstableFlag")
	RETURN(_RemoveList,_Result,2)

EVENT ABSTCharacterSetDecaying
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_DECAYING_TOUCH)
ACTIONS
	IF "c1"
		HasFlag(_Character,"ABST_SurfaceFlag")
	THEN
		IF "c1"
			CharacterHasTalent(_Character,NoAttackOfOpportunity)
		THEN
			SetFlag(_Character,"ABST_DuckFlag")
		ENDIF
		
	ENDIF
	Print(%StatusString1,"<font color='#b823cb'>Decaying</font>")
	Print(%StatusString2," was <font color='#b823cb'>Decayed</font>")		
	SetFlag(_Character,"ABST_UnstableFlag")
	IF "c1"
		CharacterHasTalent(_Character,WarriorLoreNaturalHealth)
	THEN
		SetFlag(_Character,"ABST_PictureFlag")
	ENDIF
	Set(_Result,OVR_DECAYING_TOUCH)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	IF "c1"
		CharacterHasStatus(_Character, BLESSED)
	THEN
		Set(%StatusString2,"'s <font color='#46b195'>Blessing</font> was purged")		
	ENDIF
	IF "c1"
		CharacterHasStatus(_Character, FORTIFIED)
	THEN
		Set(%StatusString2,"'s <font color='#7f3d00'>Fortification</font> was purged")		
	ENDIF
	CallFunction("PhysArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ELIF "c1"
		CharacterHasStatus(_Character, FORTIFIED)
	THEN
		ListAdd(_RemoveList, FORTIFIED)
		Set(_Result,null)
	ELIF "c1"
		CharacterHasStatus(_Character, BLESSED)
	THEN
		ListAdd(_RemoveList, BLESSED)
		Set(_Result,null)
	ENDIF
	ClearFlag(_Character,"ABST_SurfaceFlag")
	ClearFlag(_Character,"ABST_UnstableFlag")
	ClearFlag(_Character,"ABST_PictureFlag")
	ClearFlag(_Character,"ABST_DuckFlag")
	RETURN(_RemoveList,_Result,2)

EVENT ABSTCharacterSetChicken
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_CHICKEN)
ACTIONS
	IF "c1|c2"
		CharacterHasStatus(_Character,ABST_AEGIS)
		CharacterHasStatus(_Character,ABST_MORNING)
	THEN
		SetFlag(_Character,"ABST_MorningFlag")
	ENDIF
	Print(%StatusString1,"<font color='#f7ba14'>Chicken Form</font>")
	Print(%StatusString2," was turned into a <font color='#f7ba14'>Chicken</font>")		
	Set(_Result, OVR_CHICKEN)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	CallFunction("PhysArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ENDIF
	ClearFlag(_Character,"ABST_MorningFlag")
	RETURN(_RemoveList,_Result,1)

EVENT ABSTCharacterSetTaunted
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON 
	FetchCharacterApplyStatusData(_Character, OVR_TAUNTED)
ACTIONS	
	Set(_Result,OVR_TAUNTED)
	Print(%StatusString1,"Taunt")	
	Print(%StatusString2," was Taunted")		
	ListClear(_RemoveList)
	SetFlag(_Character,"ABST_UnstableFlag")
	Set(%Char,_Character)
	IF "c1"
		CharacterHasStatus(_Character, CLEAR_MINDED)
	THEN
		Set(%StatusString2,"'s <font color='#fe6e27'>Clear Mind</font> was troubled")		
	ENDIF
	IF "c1"
		CharacterHasStatus(_Character, ENRAGED)
	THEN
		Set(%StatusString2,"'s <font color='#c80030'>Rage</font> was cooled")		
	ENDIF
	CallFunction("PhysArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ELSE
		ListAdd(_RemoveList, INVISIBLE)
		IF "c1|c2"
			CharacterHasStatus(_Character, CLEAR_MINDED)
			CharacterHasStatus(_Character, ENRAGED)
		THEN
			ListAdd(_RemoveList, CLEAR_MINDED)
			ListAdd(_RemoveList, ENRAGED)
			Set(_Result,null)
		ELSE	
			ListAdd(_RemoveList, CHARMED)
			ListAdd(_RemoveList, FEAR)
			ListAdd(_RemoveList, SLEEPING)		
			ListAdd(_RemoveList, MADNESS)			
		ENDIF
	ENDIF
	ClearFlag(_Character,"ABST_UnstableFlag")	
	RETURN(_RemoveList,_Result,1)

EVENT ABSTCharacterSetSleeping
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_SLEEPING)
ACTIONS
	IF "c1|c2"
		CharacterHasStatus(_Character,ABST_AEGIS)
		CharacterHasStatus(_Character,ABST_MORNING)
	THEN
		SetFlag(_Character,"ABST_MorningFlag")
	ENDIF
	Set(_Result,OVR_SLEEPING)
	Print(%StatusString1,"<font color='#7d71d9'>Sleeping</font>")	
	Print(%StatusString2," was put to <font color='#7d71d9'>Sleep</font>")		
	ListClear(_RemoveList)
	Set(%Char,_Character)
	IF "c1"
		CharacterHasStatus(_Character, CLEAR_MINDED)
	THEN
		Set(%StatusString2,"'s <font color='#fe6e27'>Clear Mind</font> was troubled")		
	ENDIF
	IF "c1"
		CharacterHasStatus(_Character, ENRAGED)
	THEN
		Set(%StatusString2,"'s <font color='#c80030'>Rage</font> was cooled")		
	ENDIF
	CallFunction("MagicArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ELSE
		ListAdd(_RemoveList, INVISIBLE)
		IF "c1|c2"
			CharacterHasStatus(_Character, CLEAR_MINDED)
			CharacterHasStatus(_Character, ENRAGED)
		THEN
			ListAdd(_RemoveList, CLEAR_MINDED)
			ListAdd(_RemoveList, ENRAGED)
			Set(_Result,null)
		ENDIF
	ENDIF
	ClearFlag(_Character,"ABST_MorningFlag")
	RETURN(_RemoveList,_Result,1)

EVENT ABSTCharacterSetInfectiousDiseased
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_INFECTIOUS_DISEASED)
ACTIONS
	Print(%StatusString1,"<font color='#b823cb'>Infected</font>")
	Print(%StatusString2," was [1]", %StatusString1)		
	SetFlag(_Character,"ABST_UnstableFlag")
	Set(_Result, OVR_INFECTIOUS_DISEASED)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	IF "c1"
		CharacterHasStatus(_Character, BLESSED)
	THEN
		Set(%StatusString2,"'s <font color='#46b195'>Blessing</font> was purged")		
	ENDIF
	IF "c1"
		CharacterHasStatus(_Character, FORTIFIED)
	THEN
		Set(%StatusString2,"'s <font color='#7f3d00'>Fortification</font> was purged")			
	ENDIF
	CallFunction("PhysArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ELIF "c1"
		CharacterHasStatus(_Character, FORTIFIED)
	THEN
		ListAdd(_RemoveList, FORTIFIED)
		Set(_Result,null)
	ELIF "c1"
		CharacterHasStatus(_Character, BLESSED)
	THEN
		ListAdd(_RemoveList, BLESSED)
		Set(_Result,null)
	ENDIF
	ClearFlag(_Character,"ABST_UnstableFlag")
	RETURN(_RemoveList,_Result,2)

EVENT ABSTCharacterSetMadness
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_MADNESS)
ACTIONS
	IF "c1|c2"
		CharacterHasStatus(_Character,ABST_AEGIS)
		CharacterHasStatus(_Character,ABST_MORNING)
	THEN
		SetFlag(_Character,"ABST_MorningFlag")
	ENDIF
	Print(%StatusString1,"Madness")
	Print(%StatusString2," was Maddened")		
	Set(_Result,OVR_MADNESS)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	IF "c1"
		CharacterHasStatus(_Character, CLEAR_MINDED)
	THEN
		Set(%StatusString2,"'s <font color='#fe6e27'>Clear Mind</font> was troubled")			
	ENDIF
	CallFunction("MagicArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ELIF "c1"
		CharacterHasStatus(_Character, CLEAR_MINDED)
	THEN
		ListAdd(_RemoveList, CLEAR_MINDED)
		Set(_Result,null)
	ENDIF
	ClearFlag(_Character,"ABST_MorningFlag")
	RETURN(_RemoveList,_Result,1)

EVENT ABSTSetShackles
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_SHACKLES_OF_PAIN)
ACTIONS
	Print(%StatusString1,"<font color='#b823cb'>Shackled</font>")
	Print(%StatusString2," was [1]", %StatusString1)		
	SetFlag(_Character,"ABST_UnstableFlag")
	Set(_Result, OVR_SHACKLES_OF_PAIN)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	CallFunction("PhysArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ENDIF
	ClearFlag(_Character,"ABST_UnstableFlag")
	RETURN(_RemoveList,_Result,3)

//===========================================================//
//              New Vanilla Status Events                   *//
//===========================================================//

EVENT ResistExchange
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_DEMONIC_BARGAIN)
ACTIONS
	Print(%StatusString1,"<font color='#f7ba14'>Demonic Bargain</font>")
	Print(%StatusString2," was forced into a <font color='#f7ba14'>Demonic Bargain</font>")		
	SetFlag(_Character,"ABST_UnstableFlag")
	Set(_Result, OVR_DEMONIC_BARGAIN)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	CallFunction("PhysArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ENDIF
	ClearFlag(_Character,"ABST_UnstableFlag")
	RETURN(_RemoveList,_Result,1)

EVENT ResistWeak
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_WEAK)
ACTIONS
	Print(%StatusString1,"<font color='#ffffff'>Weak</font>")
	Print(%StatusString2," was <font color='#ffffff'>Weakened</font>")		
	SetFlag(_Character,"ABST_UnstableFlag")
	Set(_Result, OVR_WEAK)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	CallFunction("PhysArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ENDIF
	ClearFlag(_Character,"ABST_UnstableFlag")
	RETURN(_RemoveList,_Result,2)

EVENT ResistDazed
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_DAZED)
ACTIONS
	Print(%StatusString1,"<font color='#ffffff'>Dazed</font>")
	Print(%StatusString2," was <font color='#ffffff'>Dazed</font>")		
	SetFlag(_Character,"ABST_UnstableFlag")
	Set(_Result, OVR_DAZED)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	CallFunction("PhysArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ENDIF
	ClearFlag(_Character,"ABST_UnstableFlag")
	RETURN(_RemoveList,_Result,2)

EVENT ResistNull
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_NULL_RESISTANCE)
ACTIONS
	Print(%StatusString1,"<font color='#c80030'>Null Resistance</font>")
	Print(%StatusString2," was <font color='#c80030'>Nullified</font>")		
	SetFlag(_Character,"ABST_UnstableFlag")
	Set(_Result, OVR_NULL_RESISTANCE)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	CallFunction("MagicArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ENDIF
	ClearFlag(_Character,"ABST_UnstableFlag")
	RETURN(_RemoveList,_Result,2)

EVENT ResistFireblood
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_FIREBLOOD)
ACTIONS
	ListClear(_RemoveList)
	Print(%StatusString1,"<font color='#fe6e27'>Fireblood</font>")
	Print(%StatusString2," was tainted with <font color='#fe6e27'>Fireblood</font>")		
	SetFlag(_Character,"ABST_UnstableFlag")
	Set(_Result, OVR_FIREBLOOD)
	Set(%Char,_Character)
	CallFunction("MagicArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ENDIF
	ClearFlag(_Character,"ABST_UnstableFlag")
	RETURN(_RemoveList,_Result,2)

EVENT ResistDeaf
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_DEAF)
ACTIONS
	Print(%StatusString1,"<font color='#c9aa58'>Deaf</font>")
	Print(%StatusString2," was <font color='#c9aa58'>Deafened</font>")		
	SetFlag(_Character,"ABST_UnstableFlag")
	Set(_Result, OVR_DEAF)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	CallFunction("MagicArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ENDIF
	ClearFlag(_Character,"ABST_UnstableFlag")
	RETURN(_RemoveList,_Result,2)

EVENT ResistEntangled
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_ENTANGLED)
ACTIONS
	Print(%StatusString1,"<font color='#81ab00'>Entangled</font>")
	Print(%StatusString2," was [1]", %StatusString1)		
	SetFlag(_Character,"ABST_TorturerFlag")
	Set(_Result, OVR_ENTANGLED)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	CallFunction("MagicArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ENDIF
	ClearFlag(_Character,"ABST_TorturerFlag")
	RETURN(_RemoveList,_Result,2)

EVENT ResistDisarm
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_DISARMED)
ACTIONS
	Print(%StatusString1,"<font color='#ffffff'>Disarmed</font>")
	Print(%StatusString2," was [1]", %StatusString1)		
	SetFlag(_Character,"ABST_UnstableFlag")
	IF "c1"
		CharacterHasTalent(_Character,Memory)
	THEN
		SetFlag(_Character,"ABST_MnemonicFlag")
	ENDIF
	Set(_Result, OVR_DISARMED)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	CallFunction("PhysArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ENDIF
	ClearFlag(_Character,"ABST_UnstableFlag")
	ClearFlag(_Character,"ABST_MnemonicFlag")
	RETURN(_RemoveList,_Result,2)
	
EVENT ResistDrain
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_DRAIN)
ACTIONS
	SetFlag(_Character,"ABST_SavageFlag")
	Print(%StatusString1,"<font color='#46b195'>Source Drain</font>")
	Print(%StatusString2," was <font color='#46b195'>Source-Drained</font>")		
	Set(_Result, OVR_DRAIN)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	CallFunction("MagicArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ENDIF
	ClearFlag(_Character,"ABST_SavageFlag")
	RETURN(_RemoveList,_Result,2)	

//===========================================================//
//              ABST Compatibility Statuses                 *//
//===========================================================//

EVENT ResistCustomModStatusOVR_ARCANE_DISTURBANCE_AURA
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_ARCANE_DISTURBANCE_AURA)
ACTIONS
	Print(%StatusString1,"Magic Status")
	Print(%StatusString2," was hit with a Magic Status")		
	Set(_Result, OVR_ARCANE_DISTURBANCE_AURA)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	CallFunction("MagicArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ENDIF
	RETURN(_RemoveList,_Result,1)

EVENT ResistCustomModStatusOVR_AQUA_LOCK
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_AQUA_LOCK)
ACTIONS
	Print(%StatusString1,"Magic Status")
	Print(%StatusString2," was hit with a Magic Status")		
	Set(_Result, OVR_AQUA_LOCK)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	CallFunction("MagicArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ENDIF
	RETURN(_RemoveList,_Result,1)

EVENT ResistCustomModStatusOVR_BLUR_ENEMY
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_BLUR_ENEMY)
ACTIONS
	Print(%StatusString1,"Magic Status")
	Print(%StatusString2," was hit with a Magic Status")		
	Set(_Result, OVR_BLUR_ENEMY)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	CallFunction("MagicArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ENDIF
	RETURN(_RemoveList,_Result,1)

EVENT ResistCustomModStatusOVR_BURNING_PINK
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_BURNING_PINK)
ACTIONS
	Print(%StatusString1,"Magic Status")
	Print(%StatusString2," was hit with a Magic Status")		
	Set(_Result, OVR_BURNING_PINK)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	CallFunction("MagicArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ENDIF
	RETURN(_RemoveList,_Result,1)

EVENT ResistCustomModStatusOVR_CELESTIAL_BURN
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_CELESTIAL_BURN)
ACTIONS
	Print(%StatusString1,"Magic Status")
	Print(%StatusString2," was hit with a Magic Status")		
	Set(_Result, OVR_CELESTIAL_BURN)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	CallFunction("MagicArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ENDIF
	RETURN(_RemoveList,_Result,1)

EVENT ResistCustomModStatusOVR_CONE_OF_FORCE
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_CONE_OF_FORCE)
ACTIONS
	Print(%StatusString1,"Magic Status")
	Print(%StatusString2," was hit with a Magic Status")		
	Set(_Result, OVR_CONE_OF_FORCE)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	CallFunction("MagicArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ENDIF
	RETURN(_RemoveList,_Result,1)

EVENT ResistCustomModStatusOVR_CONTAGIOUS
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_CONTAGIOUS)
ACTIONS
	Print(%StatusString1,"Magic Status")
	Print(%StatusString2," was hit with a Magic Status")		
	Set(_Result, OVR_CONTAGIOUS)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	CallFunction("MagicArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ENDIF
	RETURN(_RemoveList,_Result,1)

EVENT ResistCustomModStatusOVR_CRYOMANCER_FROSTBITE
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_CRYOMANCER_FROSTBITE)
ACTIONS
	Print(%StatusString1,"Magic Status")
	Print(%StatusString2," was hit with a Magic Status")		
	Set(_Result, OVR_CRYOMANCER_FROSTBITE)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	CallFunction("MagicArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ENDIF
	RETURN(_RemoveList,_Result,1)

EVENT ResistCustomModStatusOVR_DAZED_MAGIC
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_DAZED_MAGIC)
ACTIONS
	Print(%StatusString1,"Magic Status")
	Print(%StatusString2," was hit with a Magic Status")		
	Set(_Result, OVR_DAZED_MAGIC)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	CallFunction("MagicArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ENDIF
	RETURN(_RemoveList,_Result,1)

EVENT ResistCustomModStatusOVR_DEADLY_TERRIFIED
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_DEADLY_TERRIFIED)
ACTIONS
	Print(%StatusString1,"Magic Status")
	Print(%StatusString2," was hit with a Magic Status")		
	Set(_Result, OVR_DEADLY_TERRIFIED)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	CallFunction("MagicArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ENDIF
	RETURN(_RemoveList,_Result,1)

EVENT ResistCustomModStatusOVR_DISRUPT_TIME_ENEMY
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_DISRUPT_TIME_ENEMY)
ACTIONS
	Print(%StatusString1,"Magic Status")
	Print(%StatusString2," was hit with a Magic Status")		
	Set(_Result, OVR_DISRUPT_TIME_ENEMY)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	CallFunction("MagicArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ENDIF
	RETURN(_RemoveList,_Result,1)

EVENT ResistCustomModStatusOVR_DISRUPT_TIME_AURA
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_DISRUPT_TIME_AURA)
ACTIONS
	Print(%StatusString1,"Magic Status")
	Print(%StatusString2," was hit with a Magic Status")		
	Set(_Result, OVR_DISRUPT_TIME_AURA)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	CallFunction("MagicArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ENDIF
	RETURN(_RemoveList,_Result,1)

EVENT ResistCustomModStatusOVR_ENERVATING_RESISTANCE
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_ENERVATING_RESISTANCE)
ACTIONS
	Print(%StatusString1,"Magic Status")
	Print(%StatusString2," was hit with a Magic Status")		
	Set(_Result, OVR_ENERVATING_RESISTANCE)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	CallFunction("MagicArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ENDIF
	RETURN(_RemoveList,_Result,1)

EVENT ResistCustomModStatusOVR_GLUED
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_GLUED)
ACTIONS
	Print(%StatusString1,"Magic Status")
	Print(%StatusString2," was hit with a Magic Status")		
	Set(_Result, OVR_GLUED)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	CallFunction("MagicArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ENDIF
	RETURN(_RemoveList,_Result,1)
	
EVENT ResistCustomModStatusOVR_HARPY_TUMBLE
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_HARPY_TUMBLE)
ACTIONS
	Print(%StatusString1,"Magic Status")
	Print(%StatusString2," was hit with a Magic Status")		
	Set(_Result, OVR_HARPY_TUMBLE)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	CallFunction("MagicArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ENDIF
	RETURN(_RemoveList,_Result,1)
	
EVENT ResistCustomModStatusOVR_HELAENE_MIRAGE_SANDSTORM
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_HELAENE_MIRAGE_SANDSTORM)
ACTIONS
	Print(%StatusString1,"Magic Status")
	Print(%StatusString2," was hit with a Magic Status")		
	Set(_Result, OVR_HELAENE_MIRAGE_SANDSTORM)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	CallFunction("MagicArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ENDIF
	RETURN(_RemoveList,_Result,1)
	
EVENT ResistCustomModStatusOVR_HELAENE_WYLDFAE_ENTANGLED
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_HELAENE_WYLDFAE_ENTANGLED)
ACTIONS
	Print(%StatusString1,"Magic Status")
	Print(%StatusString2," was hit with a Magic Status")		
	Set(_Result, OVR_HELAENE_WYLDFAE_ENTANGLED)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	CallFunction("MagicArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ENDIF
	RETURN(_RemoveList,_Result,1)
	
EVENT ResistCustomModStatusOVR_HELAENE_WYLDFAE_FAEFYRE
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_HELAENE_WYLDFAE_FAEFYRE)
ACTIONS
	Print(%StatusString1,"Magic Status")
	Print(%StatusString2," was hit with a Magic Status")		
	Set(_Result, OVR_HELAENE_WYLDFAE_FAEFYRE)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	CallFunction("MagicArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ENDIF
	RETURN(_RemoveList,_Result,1)
	
EVENT ResistCustomModStatusOVR_HELAENE_WYLDFAE_STATUS_QUICKSAND
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_HELAENE_WYLDFAE_STATUS_QUICKSAND)
ACTIONS
	Print(%StatusString1,"Magic Status")
	Print(%StatusString2," was hit with a Magic Status")		
	Set(_Result, OVR_HELAENE_WYLDFAE_STATUS_QUICKSAND)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	CallFunction("MagicArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ENDIF
	RETURN(_RemoveList,_Result,1)
	
EVENT ResistCustomModStatusOVR_IMMUTABLE_SENTINEL_AURA
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_IMMUTABLE_SENTINEL_AURA)
ACTIONS
	Print(%StatusString1,"Magic Status")
	Print(%StatusString2," was hit with a Magic Status")		
	Set(_Result, OVR_IMMUTABLE_SENTINEL_AURA)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	CallFunction("MagicArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ENDIF
	RETURN(_RemoveList,_Result,1)
	
EVENT ResistCustomModStatusOVR_IN_THRALL
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_IN_THRALL)
ACTIONS
	Print(%StatusString1,"Magic Status")
	Print(%StatusString2," was hit with a Magic Status")		
	Set(_Result, OVR_IN_THRALL)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	CallFunction("MagicArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ENDIF
	RETURN(_RemoveList,_Result,1)
	
EVENT ResistCustomModStatusOVR_MAGE_HAND
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_MAGE_HAND)
ACTIONS
	Print(%StatusString1,"Magic Status")
	Print(%StatusString2," was hit with a Magic Status")		
	Set(_Result, OVR_MAGE_HAND)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	CallFunction("MagicArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ENDIF
	RETURN(_RemoveList,_Result,1)
	
EVENT ResistCustomModStatusOVR_MOLTEN
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_MOLTEN)
ACTIONS
	Print(%StatusString1,"Magic Status")
	Print(%StatusString2," was hit with a Magic Status")		
	Set(_Result, OVR_MOLTEN)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	CallFunction("MagicArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ENDIF
	RETURN(_RemoveList,_Result,1)
	
EVENT ResistCustomModStatusOVR_MOLTENS2
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_MOLTENS2)
ACTIONS
	Print(%StatusString1,"Magic Status")
	Print(%StatusString2," was hit with a Magic Status")		
	Set(_Result, OVR_MOLTENS2)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	CallFunction("MagicArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ENDIF
	RETURN(_RemoveList,_Result,1)
	
EVENT ResistCustomModStatusOVR_MOLTENS3
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_MOLTENS3)
ACTIONS
	Print(%StatusString1,"Magic Status")
	Print(%StatusString2," was hit with a Magic Status")		
	Set(_Result, OVR_MOLTENS3)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	CallFunction("MagicArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ENDIF
	RETURN(_RemoveList,_Result,1)
	
EVENT ResistCustomModStatusOVR_NULLIFY_RESIST
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_NULLIFY_RESIST)
ACTIONS
	Print(%StatusString1,"Magic Status")
	Print(%StatusString2," was hit with a Magic Status")		
	Set(_Result, OVR_NULLIFY_RESIST)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	CallFunction("MagicArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ENDIF
	RETURN(_RemoveList,_Result,1)
	
EVENT ResistCustomModStatusOVR_OdinPyro_INCINERATEPROC
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_OdinPyro_INCINERATEPROC)
ACTIONS
	Print(%StatusString1,"Magic Status")
	Print(%StatusString2," was hit with a Magic Status")		
	Set(_Result, OVR_OdinPyro_INCINERATEPROC)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	CallFunction("MagicArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ENDIF
	RETURN(_RemoveList,_Result,1)
	
EVENT ResistCustomModStatusOVR_OdinPyro_PURIFYINGFIRE
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_OdinPyro_PURIFYINGFIRE)
ACTIONS
	Print(%StatusString1,"Magic Status")
	Print(%StatusString2," was hit with a Magic Status")		
	Set(_Result, OVR_OdinPyro_PURIFYINGFIRE)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	CallFunction("MagicArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ENDIF
	RETURN(_RemoveList,_Result,1)
	
EVENT ResistCustomModStatusOVR_OdinPyro_PURIFYINGFIRE_ENEMY
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_OdinPyro_PURIFYINGFIRE_ENEMY)
ACTIONS
	Print(%StatusString1,"Magic Status")
	Print(%StatusString2," was hit with a Magic Status")		
	Set(_Result, OVR_OdinPyro_PURIFYINGFIRE_ENEMY)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	CallFunction("MagicArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ENDIF
	RETURN(_RemoveList,_Result,1)
	
EVENT ResistCustomModStatusOVR_OdinPyro_SNARED
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_OdinPyro_SNARED)
ACTIONS
	Print(%StatusString1,"Magic Status")
	Print(%StatusString2," was hit with a Magic Status")		
	Set(_Result, OVR_OdinPyro_SNARED)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	CallFunction("MagicArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ENDIF
	RETURN(_RemoveList,_Result,1)
	
EVENT ResistCustomModStatusOVR_OdinPyro_SMOLDER
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_OdinPyro_SMOLDER)
ACTIONS
	Print(%StatusString1,"Magic Status")
	Print(%StatusString2," was hit with a Magic Status")		
	Set(_Result, OVR_OdinPyro_SMOLDER)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	CallFunction("MagicArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ENDIF
	RETURN(_RemoveList,_Result,1)
	
EVENT ResistCustomModStatusOVR_OdinPyro_SMOLDER_AURA
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_OdinPyro_SMOLDER_AURA)
ACTIONS
	Print(%StatusString1,"Magic Status")
	Print(%StatusString2," was hit with a Magic Status")		
	Set(_Result, OVR_OdinPyro_SMOLDER_AURA)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	CallFunction("MagicArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ENDIF
	RETURN(_RemoveList,_Result,1)
	
EVENT ResistCustomModStatusOVR_PRESSUREDHEART
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_PRESSUREDHEART)
ACTIONS
	Print(%StatusString1,"Magic Status")
	Print(%StatusString2," was hit with a Magic Status")		
	Set(_Result, OVR_PRESSUREDHEART)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	CallFunction("MagicArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ENDIF
	RETURN(_RemoveList,_Result,1)
	
EVENT ResistCustomModStatusOVR_PURGE
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_PURGE)
ACTIONS
	Print(%StatusString1,"Magic Status")
	Print(%StatusString2," was hit with a Magic Status")		
	Set(_Result, OVR_PURGE)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	CallFunction("MagicArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ENDIF
	RETURN(_RemoveList,_Result,1)
	
EVENT ResistCustomModStatusOVR_ROTTING
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_ROTTING)
ACTIONS
	Print(%StatusString1,"Magic Status")
	Print(%StatusString2," was hit with a Magic Status")		
	Set(_Result, OVR_ROTTING)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	CallFunction("MagicArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ENDIF
	RETURN(_RemoveList,_Result,1)
	
EVENT ResistCustomModStatusOVR_SHADE_Fading
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_SHADE_Fading)
ACTIONS
	Print(%StatusString1,"Magic Status")
	Print(%StatusString2," was hit with a Magic Status")		
	Set(_Result, OVR_SHADE_Fading)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	CallFunction("MagicArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ENDIF
	RETURN(_RemoveList,_Result,1)
	
EVENT ResistCustomModStatusOVR_SILVERMOON
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_SILVERMOON)
ACTIONS
	Print(%StatusString1,"Magic Status")
	Print(%StatusString2," was hit with a Magic Status")		
	Set(_Result, OVR_SILVERMOON)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	CallFunction("MagicArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ENDIF
	RETURN(_RemoveList,_Result,1)
	
EVENT ResistCustomModStatusOVR_STATUS_THEFT
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_STATUS_THEFT)
ACTIONS
	Print(%StatusString1,"Magic Status")
	Print(%StatusString2," was hit with a Magic Status")		
	Set(_Result, OVR_STATUS_THEFT)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	CallFunction("MagicArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ENDIF
	RETURN(_RemoveList,_Result,1)
	
EVENT ResistCustomModStatusOVR_TRICKSTER_RABBIT
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_TRICKSTER_RABBIT)
ACTIONS
	Print(%StatusString1,"Magic Status")
	Print(%StatusString2," was hit with a Magic Status")		
	Set(_Result, OVR_TRICKSTER_RABBIT)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	CallFunction("MagicArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ENDIF
	RETURN(_RemoveList,_Result,1)
	
EVENT ResistCustomModStatusOVR_VAMPIRE_BLOODBOILING
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_VAMPIRE_BLOODBOILING)
ACTIONS
	Print(%StatusString1,"Magic Status")
	Print(%StatusString2," was hit with a Magic Status")		
	Set(_Result, OVR_VAMPIRE_BLOODBOILING)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	CallFunction("MagicArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ENDIF
	RETURN(_RemoveList,_Result,1)
	
EVENT ResistCustomModStatusOVR_ANAEMIA
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_ANAEMIA)
ACTIONS
	Print(%StatusString1,"Physical Status")
	Print(%StatusString2," was hit with a Physical Status")		
	Set(_Result, OVR_ANAEMIA)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	CallFunction("PhysArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ENDIF
	RETURN(_RemoveList,_Result,1)
	
EVENT ResistCustomModStatusOVR_ATTENUATE
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_ATTENUATE)
ACTIONS
	Print(%StatusString1,"Physical Status")
	Print(%StatusString2," was hit with a Physical Status")		
	Set(_Result, OVR_ATTENUATE)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	CallFunction("PhysArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ENDIF
	RETURN(_RemoveList,_Result,1)
	
EVENT ResistCustomModStatusOVR_DEATH_TOUCHED
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_DEATH_TOUCHED)
ACTIONS
	Print(%StatusString1,"Physical Status")
	Print(%StatusString2," was hit with a Physical Status")		
	Set(_Result, OVR_DEATH_TOUCHED)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	CallFunction("PhysArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ENDIF
	RETURN(_RemoveList,_Result,1)
	
EVENT ResistCustomModStatusOVR_DECELERATED
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_DECELERATED)
ACTIONS
	Print(%StatusString1,"Physical Status")
	Print(%StatusString2," was hit with a Physical Status")		
	Set(_Result, OVR_DECELERATED)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	CallFunction("PhysArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ENDIF
	RETURN(_RemoveList,_Result,1)
	
EVENT ResistCustomModStatusOVR_LEID
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_LEID)
ACTIONS
	Print(%StatusString1,"Physical Status")
	Print(%StatusString2," was hit with a Physical Status")		
	Set(_Result, OVR_LEID)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	CallFunction("PhysArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ENDIF
	RETURN(_RemoveList,_Result,1)
	
EVENT ResistCustomModStatusOVR_ODINBLADEWITHER
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_ODINBLADEWITHER)
ACTIONS
	Print(%StatusString1,"Physical Status")
	Print(%StatusString2," was hit with a Physical Status")		
	Set(_Result, OVR_ODINBLADEWITHER)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	CallFunction("PhysArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ENDIF
	RETURN(_RemoveList,_Result,1)
	
EVENT ResistCustomModStatusOVR_REJECTED_BONES
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_REJECTED_BONES)
ACTIONS
	Print(%StatusString1,"Physical Status")
	Print(%StatusString2," was hit with a Physical Status")		
	Set(_Result, OVR_REJECTED_BONES)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	CallFunction("PhysArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ENDIF
	RETURN(_RemoveList,_Result,1)
	
EVENT ResistCustomModStatusOVR_RUSTED
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_RUSTED)
ACTIONS
	Print(%StatusString1,"Physical Status")
	Print(%StatusString2," was hit with a Physical Status")		
	Set(_Result, OVR_RUSTED)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	CallFunction("PhysArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ENDIF
	RETURN(_RemoveList,_Result,1)
	
EVENT ResistCustomModStatusOVR_SLOTH
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_SLOTH)
ACTIONS
	Print(%StatusString1,"Physical Status")
	Print(%StatusString2," was hit with a Physical Status")		
	Set(_Result, OVR_SLOTH)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	CallFunction("PhysArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ENDIF
	RETURN(_RemoveList,_Result,1)
	
EVENT ResistCustomModStatusOVR_TIME_LOST
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_TIME_LOST)
ACTIONS
	Print(%StatusString1,"Physical Status")
	Print(%StatusString2," was hit with a Physical Status")		
	Set(_Result, OVR_TIME_LOST)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	CallFunction("PhysArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ENDIF
	RETURN(_RemoveList,_Result,1)
	
EVENT ResistCustomModStatusOVR_VAMPIRE_BITTEN
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_VAMPIRE_BITTEN)
ACTIONS
	Print(%StatusString1,"Physical Status")
	Print(%StatusString2," was hit with a Physical Status")		
	Set(_Result, OVR_VAMPIRE_BITTEN)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	CallFunction("PhysArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ENDIF
	RETURN(_RemoveList,_Result,1)
	
EVENT ResistCustomModStatusOVR_VAMPIRE_IMPALED
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_VAMPIRE_IMPALED)
ACTIONS
	Print(%StatusString1,"Physical Status")
	Print(%StatusString2," was hit with a Physical Status")		
	Set(_Result, OVR_VAMPIRE_IMPALED)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	CallFunction("PhysArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ENDIF
	RETURN(_RemoveList,_Result,1)
	
EVENT ResistCustomModStatusOVR_VAMPIRE_MAIMED
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_VAMPIRE_MAIMED)
ACTIONS
	Print(%StatusString1,"Physical Status")
	Print(%StatusString2," was hit with a Physical Status")		
	Set(_Result, OVR_VAMPIRE_MAIMED)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	CallFunction("PhysArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ENDIF
	RETURN(_RemoveList,_Result,1)
	
EVENT ResistCustomModStatusOVR_VAMPIRE_RAVAGED
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_VAMPIRE_RAVAGED)
ACTIONS
	Print(%StatusString1,"Physical Status")
	Print(%StatusString2," was hit with a Physical Status")		
	Set(_Result, OVR_VAMPIRE_RAVAGED)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	CallFunction("PhysArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ENDIF
	RETURN(_RemoveList,_Result,1)
	
EVENT ResistCustomModStatusOVR_WEAK2
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	STRING:_String
	INT:_Saved
ON
	FetchCharacterApplyStatusData(_Character, OVR_WEAK2)
ACTIONS
	Print(%StatusString1,"Physical Status")
	Print(%StatusString2," was hit with a Physical Status")		
	Set(_Result, OVR_WEAK2)
	ListClear(_RemoveList)
	Set(%Char,_Character)
	CallFunction("PhysArmorTally")
	Set(_Saved,%Saved)
	IF "c1"
		IsEqual(_Saved,1)
	THEN
		Set(_Result,null)
	ENDIF
	RETURN(_RemoveList,_Result,1)
	
//===========================================================//
//               Misc Fetch Status Functions                *//
//===========================================================//

EVENT ResistABSTDual
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
ON
	FetchCharacterApplyStatusData(_Character, ABST_DUAL5)
ACTIONS
	ListClear(_RemoveList)
	IF "c1"
		CharacterHasStatus(_Character,ABST_DUAL5)
	THEN
		CharacterRemoveStatus(_Character,ABST_DUAL5,null,0)
		Set(_Result, ABST_DUAL10)
	ELIF "c1"
		CharacterHasStatus(_Character,ABST_DUAL10)
	THEN
		CharacterRemoveStatus(_Character,ABST_DUAL10,null,0)
		Set(_Result, ABST_DUAL15)			
	ELIF "c1"
		CharacterHasStatus(_Character,ABST_DUAL15)
	THEN
		CharacterRemoveStatus(_Character,ABST_DUAL15,null,0)
		Set(_Result, ABST_DUAL20)			
	ELIF "c1"
		CharacterHasStatus(_Character,ABST_DUAL20)
	THEN
		CharacterRemoveStatus(_Character,ABST_DUAL20,null,0)
		Set(_Result, ABST_DUAL25)			
	ELSE
		Set(_Result, ABST_DUAL5)	
	ENDIF
	RETURN(_RemoveList,_Result,null)

EVENT LeechTalentCounter
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
	FLOAT:_Vit
ON
	FetchCharacterApplyStatusData(_Character, ABST_LEECH)
ACTIONS
	Set(_Result, null)
	ListClear(_RemoveList)
	IF "c1&c2&c3&c4"
		CharacterHasTalent(_Character,Leech)
		IsInActiveTurn(_Character)
		CharacterGetStat(_Vit,_Character,Vitality)
		IsLessThen(_Vit,1.0)
	THEN
		Set(_Result, ABST_LEECH)
	ENDIF
	RETURN(_RemoveList,_Result,null)

//===========================================================//
//                Vanilla Recovery Add-Ons                  *//
//===========================================================//

EVENT CharRemoveMad
VARS
	CHARACTER:_Character
ON
	OnCharacterStatusRemoved(_Character, MADNESS)
ACTIONS
	CharacterApplyStatus(_Character, POST_MAGIC_CONTROL, 0)

EVENT CharRemoveCharmed
VARS
	CHARACTER:_Character
ON
	OnCharacterStatusRemoved(_Character, CHARMED)
ACTIONS
	CharacterApplyStatus(_Character, POST_MAGIC_CONTROL, 0)

EVENT CharRemoveSleeping
VARS
	CHARACTER:_Character
ON
	OnCharacterStatusRemoved(_Character, SLEEPING)
ACTIONS
	CharacterApplyStatus(_Character, POST_MAGIC_CONTROL, 0)

EVENT CharRemoveChicken
VARS
	CHARACTER:_Character
ON
	OnCharacterStatusRemoved(_Character, CHICKEN)
ACTIONS
	CharacterApplyStatus(_Character, POST_PHYS_CONTROL, 0)

//===========================================================//
//                       Talent Stuff                       *//
//===========================================================//

EVENT DualCounterCount
VARS
CHARACTER:_Char
ON
	OnCharacterEvent(_Char,"AddDualCounter")
ACTIONS
	Add(%DualCounter,1)

EVENT ArrowRecoveryOnMagicArrow
VARS
CHARACTER:_Char
STATUS:_Status
ON
	OnSkillCast(_Char,Projectile_CharmingArrow)
	OnSkillCast(_Char,Projectile_SlowDownArrow)
	OnSkillCast(_Char,Projectile_PoisonArrow)
	OnSkillCast(_Char,Projectile_PoisonedCloudArrow)
	OnSkillCast(_Char,Projectile_StaticCloudArrow)
	OnSkillCast(_Char,Projectile_SteamCloudArrow)
	OnSkillCast(_Char,Projectile_StunningArrow)
	OnSkillCast(_Char,Projectile_CursedFireArrow)
	OnSkillCast(_Char,Projectile_WaterArrow)
	OnSkillCast(_Char,Projectile_FreezingArrow)
	OnSkillCast(_Char,Projectile_ExplosionArrow)
	OnSkillCast(_Char,Projectile_FireArrow)
ACTIONS
	IF "c1"
		CharacterHasTalent(_Char,RangerLoreArrowRecover)
	THEN
		CharacterApplyStatus(_Char,ARROW_CHECK_MAGIC,1)
		Set(_Status,ARROW_CHECK_MAGIC)
		SetVar(_Char,"ScrubbedStatus",_Status)
		CharacterEvent(_Char,"CharacterRemoveStatus")
	ENDIF

EVENT ArrowRecoveryOnPhysicalArrow
VARS
CHARACTER:_Char
STATUS:_Status
ON
	OnSkillCast(_Char,Projectile_KnockedOutArrow)
	OnSkillCast(_Char,Projectile_BleedingArrow)
ACTIONS
	IF "c1"
		CharacterHasTalent(_Char,RangerLoreArrowRecover)
	THEN
		CharacterApplyStatus(_Char,ARROW_CHECK_PHYS,1)
		Set(_Status,ARROW_CHECK_PHYS)
		SetVar(_Char,"ScrubbedStatus",_Status)
		CharacterEvent(_Char,"CharacterRemoveStatus")
	ENDIF

EVENT GuerrillaOnSneakAttack
VARS
CHARACTER:_Char
STATUS:_Status
ON
	OnCharacterStatusRemoved(_Char,SNEAKING)
	OnCharacterStatusRemoved(_Char,INVISIBLE)
ACTIONS
	IF "c1"
		CharacterHasTalent(_Char,SurpriseAttack)
	THEN
		CharacterApplyStatus(_Char,ABST_GUERILLA,-1)
		Set(_Status,ABST_GUERILLA)
		SetVar(_Char,"ScrubbedStatus",_Status)
		CharacterEvent(_Char,"CharacterRemoveStatus")
	ENDIF

EVENT GuerrillaOnChloroform
VARS
CHARACTER:_Char
STATUS:_Status
ON
	OnSkillCast(_Char,Projectile_Chloroform)
ACTIONS
	IF "c1&(c2|c3)"
		CharacterHasTalent(_Char,SurpriseAttack)
		CharacterHasStatus(_Char,SNEAKING)
		CharacterHasStatus(_Char,INVISIBLE)
	THEN
		CharacterApplyStatus(_Char,ABST_GUERILLA,-1)
		Set(_Status,ABST_GUERILLA)
		SetVar(_Char,"ScrubbedStatus",_Status)
		CharacterEvent(_Char,"CharacterRemoveStatus")
	ENDIF	
	
EVENT SlingshotOnMagicGrenade
VARS
CHARACTER:_Char
STATUS:_Scrubbed
ON
	OnSkillCast(_Char,Projectile_Quest_Arx_Groom_CursedPoisonFlask)
	OnSkillCast(_Char,Projectile_Grenade_Flashbang)
	OnSkillCast(_Char,Projectile_Grenade_Molotov)
	OnSkillCast(_Char,Projectile_Grenade_CursedMolotov)
	OnSkillCast(_Char,Projectile_Grenade_Love)
	OnSkillCast(_Char,Projectile_Grenade_MindMaggot)
	OnSkillCast(_Char,Projectile_Grenade_PoisonFlask)
	OnSkillCast(_Char,Projectile_Grenade_MustardGas)
	OnSkillCast(_Char,Projectile_Grenade_CursedPoisonFlask)
	OnSkillCast(_Char,Projectile_Grenade_Terror)
	OnSkillCast(_Char,Projectile_Grenade_Taser)
	OnSkillCast(_Char,Projectile_Grenade_Ice)
ACTIONS
	IF "c1"
		CharacterHasTalent(_Char,WarriorLoreGrenadeRange)
	THEN
		CharacterApplyStatus(_Char,GRENADE_CHECK_MAGIC,1)
		Set(_Scrubbed,GRENADE_CHECK_MAGIC)
		SetVar(_Char,"ScrubbedStatus",_Scrubbed)
		CharacterEvent(_Char,"CharacterRemoveStatus")
	ENDIF

EVENT SlingshotOnPhysicalGrenade
VARS
CHARACTER:_Char
STATUS:_Scrubbed
ON
	OnSkillCast(_Char,Projectile_Grenade_Tremor)
	OnSkillCast(_Char,Projectile_Grenade_Nailbomb)
	OnSkillCast(_Char,Projectile_Grenade_ChemicalWarfare)
ACTIONS
	IF "c1"
		CharacterHasTalent(_Char,WarriorLoreGrenadeRange)
	THEN
		CharacterApplyStatus(_Char,GRENADE_CHECK_PHYS,1)
		Set(_Scrubbed,GRENADE_CHECK_PHYS)
		SetVar(_Char,"ScrubbedStatus",_Scrubbed)
		CharacterEvent(_Char,"CharacterRemoveStatus")
	ENDIF

EVENT UnstableStatusAppliedScore
VARS
CHARACTER:_Char
INT:_Int
ON
	OnCharacterStatusApplied(_Char,NULL_RESISTANCE)
	OnCharacterStatusApplied(_Char,DEAF)
	OnCharacterStatusApplied(_Char,BLIND)
	OnCharacterStatusApplied(_Char,MUTED)
	OnCharacterStatusApplied(_Char,CURSED)
	OnCharacterStatusApplied(_Char,FIREBLOOD)
	OnCharacterStatusApplied(_Char,DISARMED)
	OnCharacterStatusApplied(_Char,CRIPPLED)
	OnCharacterStatusApplied(_Char,DISEASED)
	OnCharacterStatusApplied(_Char,SHACKLES_OF_PAIN)
	OnCharacterStatusApplied(_Char,DECAYING_TOUCH)
	OnCharacterStatusApplied(_Char,OVR_INFECTIOUS_DISEASED)
	OnCharacterStatusApplied(_Char,DAZED)
	OnCharacterStatusApplied(_Char,SLOWED)
	OnCharacterStatusApplied(_Char,WEAK)
	OnCharacterStatusApplied(_Char,TAUNTED)	
ACTIONS
	IF "c1"
		IsInCombat(_Char)
	THEN	
		IF "c1"
			GetVar(_Int,_Char,"UnstableCounter")
		THEN	
			Add(_Int,1)
			SetVar(_Char,"UnstableCounter",_Int)
		ENDIF
	ENDIF

EVENT UnstableStatusRemovedScore
VARS
CHARACTER:_Char
INT:_Int
ON
	OnCharacterStatusRemoved(_Char,NULL_RESISTANCE)
	OnCharacterStatusRemoved(_Char,DEAF)
	OnCharacterStatusRemoved(_Char,BLIND)
	OnCharacterStatusRemoved(_Char,MUTED)
	OnCharacterStatusRemoved(_Char,CURSED)
	OnCharacterStatusRemoved(_Char,FIREBLOOD)
	OnCharacterStatusRemoved(_Char,DISARMED)
	OnCharacterStatusRemoved(_Char,CRIPPLED)
	OnCharacterStatusRemoved(_Char,DISEASED)
	OnCharacterStatusRemoved(_Char,SHACKLES_OF_PAIN)
	OnCharacterStatusRemoved(_Char,DECAYING_TOUCH)
	OnCharacterStatusRemoved(_Char,OVR_INFECTIOUS_DISEASED)
	OnCharacterStatusRemoved(_Char,DAZED)
	OnCharacterStatusRemoved(_Char,SLOWED)
	OnCharacterStatusRemoved(_Char,WEAK)
	OnCharacterStatusRemoved(_Char,TAUNTED)	
ACTIONS
	IF "c1"
		IsInCombat(_Char)
	THEN	
		IF "c1"
			GetVar(_Int,_Char,"UnstableCounter")
		THEN	
			Subtract(_Int,1)
			SetVar(_Char,"UnstableCounter",_Int)
		ENDIF	
	ENDIF

//===========================================================//
//                      Misc Functions                      *//
//===========================================================//

EVENT IncreaseDif
VARS
CHARACTER:_Char
INT:_Int
ON
	OnGlobalFlagCleared("ABST_IncreaseResolve")
ACTIONS
	Add(%ResolveLevel,1)

EVENT LowerDif
VARS
CHARACTER:_Char
INT:_Int
ON
	OnGlobalFlagCleared("ABST_DecreaseResolve")
ACTIONS
	IF "c1"
		IsGreaterThen(%ResolveLevel,0)
	THEN
		Subtract(%ResolveLevel,1)
	ENDIF

EVENT ABSTReverseSource
VARS
CHARACTER:_Char
ON
	OnCharacterFlagCleared("ABST_HasBlessOrCurse",_Char)
ACTIONS
	IF "c1"
		CharacterHasSkill(_Char,Target_Bless)
	THEN
		CharacterRemoveSkill(_Char,Target_Bless)
		CharacterAddSkill(_Char,Target_Curse)
	ELIF "c1"
		CharacterHasSkill(_Char,Target_Curse)
	THEN
		CharacterRemoveSkill(_Char,Target_Curse)
		CharacterAddSkill(_Char,Target_Bless)
	ENDIF
	
//===========================================================//
//                       Aura Functions                     *//
//===========================================================//	
				
EVENT ProcAura
VARS
CHARACTER:_Char
FLOAT:_Range
ON
	OnCharacterEvent(_Char,"AuraActivate")
ACTIONS
	IF "c1"
		GetVar(_Range,_Char,"AuraRadius")
	THEN	
		Set(%AuraCaster,_Char)
		IterateCharactersNear(_Char,_Range,"AuraCast")
	ENDIF
	
EVENT AuraCast
VARS
CHARACTER:_Char
ON
	OnIterateCharacter(_Char,"AuraCast")
ACTIONS
	IF "c1"
		CharacterIsEnemy(_Char,%AuraCaster)
	THEN	
		CharacterCharacterEvent(_Char,%AuraCaster,"AuraApply")
	ENDIF