INIT
CHARACTER:%Char
LIST<CHARACTER>:%BlightSpawnList
EVENTS

EVENT MTOnTurn
VARS
CHARACTER:_Char
CHARACTER:_Owner
FIXEDSTRING:_Scroll
CHARACTER:_Poisoner
INT:_ScrollMarker
CHARACTER:_BlightSpawnTarget
FLOAT3:_SpawnPoint	
ON
	OnTurn(_Char,_)
ACTIONS
	IF "c1"
		CharacterHasTalent(_Char,ResistKnockdown)	
	THEN
		ListClear(%BlightSpawnList)
		IterateHostilesFor(_Char,"GetBlightSpawn")
		IF "c1&c2"
			ListGetRandom(%BlightSpawnList,_BlightSpawnTarget)
			GetPosition(_BlightSpawnTarget,_SpawnPoint)
		THEN
			SpawnCharacter(_,MT_CorpsePlant_653f533f-d9f3-40df-a3b1-fa2594547f87,_SpawnPoint,0)
		ENDIF
	ENDIF
	IF "!c1"
		CharacterHasStatus(_Char,MADNESS)
	THEN	
 	IF "c1&c2&c3&!c4"
		CharacterHasStatus(_Char,POISONED)
		CharacterGetStatusSourceCharacter(_Char,POISONED,_Poisoner)
		HasFlag(_Poisoner,"MT_ExtraWandCharge")
		CharacterIsAlly(_Char,_Poisoner)
	THEN
		CharacterApplyStatus(_Char,MT_UNTREATED1,1)
	ENDIF 	 
	IF "c1&!c2&c3"
		CharacterHasStatus(_Char,MT_AGITATED)
		CharacterHasStatus(_Char,LEADERSHIP)
		GetVar(_Owner,_Char,"BeastmasterLeader")		
	THEN
		CharacterRemoveStatus(_Char,MT_AGITATED,null,0)	
		CharacterApplyStatus(_Char,MADNESS,-1,1,_Owner)
	ENDIF
	ENDIF

EVENT MTOnTurnEnd
VARS
CHARACTER:_Char
CHARACTER:_Owner
ON
  OnTurnEnded(_Char,_)
ACTIONS
	IF "c1&!c2"
		CharacterHasTalent(_Char,FolkDancer)
		CharacterHasStatus(_Char,SNEAKING)
	THEN
		CharacterApplyStatus(_Char,SNEAKING)
	ENDIF	
	IF "c1&c2&c3&!c4"
		CharacterHasStatus(_Char,MADNESS)
		GetVar(_Owner,_Char,"BeastmasterLeader")
		CharacterGetStatusSourceCharacter(_Char,MADNESS,_Owner)
		CharacterHasStatus(_Char,EXTRA_TURN)
	THEN	
		CharacterRemoveStatus(_Char,MADNESS,null,0)
		CharacterEvent(_Char,"BeastmasterReapply")		
	ENDIF	

EVENT BeastmasterSummonedEvent
VARS
CHARACTER:_Summon
CHARACTER:_Owner
CHARACTER:_Leader
ON
	OnCharacterEvent(_Summon,"BeastmasterSummoned")
ACTIONS	
	IF "c1&c2&c3&c4"
		GetVar(_Owner,_Summon,"BeastmasterLeader")
		CharacterHasStatus(_Summon,LEADERSHIP)
		CharacterGetStatusSourceCharacter(_Summon,LEADERSHIP,_Leader)
		IsEqual(_Owner,_Leader)
	THEN
		CharacterApplyStatus(_Summon,MT_UNRULY,-1)
	ELSE	
		CharacterApplyStatus(_Summon,MT_AGITATED,-1)
	ENDIF

EVENT BeastmasterLeaderChange
VARS
CHARACTER:_Char
ON
	OnCharacterStatusRemoved(_Char,LEADERSHIP)
	OnCharacterStatusApplied(_Char,LEADERSHIP)
ACTIONS		
	IF "c1|c2"
		CharacterHasStatus(_Char,MT_UNRULY)
		CharacterHasStatus(_Char,MT_AGITATED)
	THEN	
		CharacterEvent(_Char,"BeastmasterSummoned")
		IF "c1"
			IsInActiveTurn(_Char)
		THEN	
			CharacterEvent(_Char,"BeastmasterLossTurn")
		ENDIF
	ENDIF
		

EVENT MTOnTurnMadness
VARS
CHARACTER:_Char
CHARACTER:_Owner
ON
	OnCharacterEvent(_Char,"BeastmasterTurnMadness")		
ACTIONS
	IF "c1&!c2&c3"
		CharacterHasStatus(_Char,MT_AGITATED)
		CharacterHasStatus(_Char,LEADERSHIP)
		GetVar(_Owner,_Char,"BeastmasterLeader")		
	THEN
		CharacterRemoveStatus(_Char,MT_AGITATED,null,0)
		CharacterApplyStatus(_Char,EXTRA_TURN,1,1,_Owner)		
		CharacterApplyStatus(_Char,MADNESS,-1,1,_Owner)
	ENDIF		
		
EVENT ChanceToHitMeleeCheck
VARS
CHARACTER:_Char
CHARACTER:_Attacker
ON
	OnMiss(_Attacker,_,_Char,_)
	OnBlock(_Attacker,_,_Char,_)
ACTIONS
	IF "c1&c2"
		CharacterHasTalent(_Char,ChanceToHitMelee)
		CharacterInWeaponRange(_Char,_Attacker)
	THEN	
		CharacterCharacterEvent(_Char,_Attacker,"ChanceToHitMeleeEvent")
	ENDIF
	
EVENT AirSpellsRemoveStunned
VARS
	CHARACTER:_Char
ON 
	OnCharacterStatusRemoved(_Char, STUNNED)
	OnCharacterStatusRemoved(_Char, SHOCKED)	
ACTIONS
	IF "c1"
		CharacterHasTalent(_Char,AirSpells)
	THEN
		CharacterApplyStatus(_Char, OVERCHARGED, 1)
	ENDIF

EVENT BackstabSkillReviser
VARS
CHARACTER:_Char
ON
	OnSkillAdded(_Char,Target_HeavyAttack,0)
	OnSkillAdded(_Char,Target_DualWieldingAttack,0)
	OnCharacterFlagSet("MT_Backstab",_Char)
ACTIONS
	IF "c1|c2"
		CharacterHasTalent(_Char,Backstab)
		HasFlag(_Char,"MT_Backstab")
	THEN
		IF "c1"
			CharacterHasWeaponType(_Char,Knife,1)
		THEN	
			CharacterRemoveSkill(_Char,Target_DualWieldingAttack)
			CharacterAddSkill(_Char,Target_PiercingDualWieldingAttack)
		ENDIF
		IF "c1"
			CharacterHasWeaponType(_Char,Spear,1)
		THEN		
			CharacterRemoveSkill(_Char,Target_HeavyAttack)
			CharacterAddSkill(_Char,Target_PiercingHeavyAttack)
		ENDIF
	ENDIF

EVENT BackstabSkillSwitcher
VARS
CHARACTER:_Char
ITEM:_Weapon
ON
	OnItemUnequipped(_Char,_Weapon)
ACTIONS
	IF "c1|c2"
		CharacterHasTalent(_Char,Backstab)
		HasFlag(_Char,"MT_Backstab")
	THEN
		CharacterEvent(_Char,"BackstabTimer")
	ENDIF

EVENT BackstabWeaponSwitched
VARS
CHARACTER:_Char
ON
	OnCharacterEvent(_Char,"BackstabEvent")
ACTIONS
	IF "!c1"
		CharacterHasWeaponType(_Char,Spear,1)
	THEN		
		CharacterRemoveSkill(_Char,Target_PiercingHeavyAttack)			
	ENDIF
	IF "c1"
		CharacterHasWeaponType(_Char,Knife,1)
	THEN	
		CharacterRemoveSkill(_Char,Target_PiercingDualWieldingAttack)			
	ENDIF
	
EVENT BackstabSkillRemover
VARS
CHARACTER:_Char
ON
	OnCharacterFlagCleared("MT_Backstab",_Char)
	OnTalentLocked(_Char,Backstab)
ACTIONS
	IF "c1"
		CharacterHasWeaponType(_Char,Knife,1)
	THEN	
		CharacterRemoveSkill(_Char,Target_PiercingDualWieldingAttack)
		CharacterAddSkill(_Char,Target_DualWieldingAttack)
	ENDIF
	IF "c1"
		CharacterHasWeaponType(_Char,Spear,1)
	THEN		
		CharacterRemoveSkill(_Char,Target_PiercingHeavyAttack)
		CharacterAddSkill(_Char,Target_HeavyAttack)
	ENDIF	

EVENT BlightSpawnIterator
VARS
CHARACTER:_Char
ON
  OnIterateCharacter(_Char,"GetBlightSpawn")
ACTIONS
  ListAdd(%BlightSpawnList,_Char)

EVENT BlightSpawner
VARS
CHARACTER:_BlightSpawnTarget
FLOAT3:_SpawnPoint
ON
	OnTimer("BlightSpawnTimer")
ACTIONS
	IF "c1&c2"
		ListGetRandom(%BlightSpawnList,_BlightSpawnTarget)
		GetPosition(_BlightSpawnTarget,_SpawnPoint)
	THEN
		SpawnCharacter(_,MT_CorpsePlant_653f533f-d9f3-40df-a3b1-fa2594547f87,_SpawnPoint,0)
	ENDIF	
	
EVENT ResistUntreatedPoison
VARS
	CHARACTER:_Character
	LIST<STATUS>:_RemoveList
	STATUS:_Result
ON
	FetchCharacterApplyStatusData(_Character, MT_UNTREATED1)
ACTIONS
	ListClear(_RemoveList)
	Set(_Result, MT_UNTREATED1)	
	IF "c1"
		CharacterHasStatus(_Character,MT_UNTREATED1)
	THEN
		Set(_Result, MT_UNTREATED2)
	ELIF "c1"
		CharacterHasStatus(_Character,MT_UNTREATED2)
	THEN
		Set(_Result, MT_UNTREATED3)			
	ELIF "c1"
		CharacterHasStatus(_Character,MT_UNTREATED3)
	THEN
		Set(_Result, MT_UNTREATED4)			
	ELIF "c1"
		CharacterHasStatus(_Character,MT_UNTREATED4)
	THEN
		Set(_Result, MT_UNTREATED5)			
	ELIF "c1"
		CharacterHasStatus(_Character,MT_UNTREATED6)
	THEN
		Set(_Result, MT_UNTREATED7)
	ELIF "c1"
		CharacterHasStatus(_Character,MT_UNTREATED7)
	THEN
		Set(_Result, MT_UNTREATED8)			
	ELIF "c1"
		CharacterHasStatus(_Character,MT_UNTREATED8)
	THEN
		Set(_Result, MT_UNTREATED8)		
	ENDIF
	RETURN(_RemoveList,_Result,1)
